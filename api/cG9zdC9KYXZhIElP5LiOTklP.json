{"title":"Java IO NIO","date":"2017-12-02T21:01:24.000Z","excerpt":"","slug":"Java IO与NIO","tags":["java基础"],"categories":["Java相关"],"updated":"2018-09-21T00:54:57.389Z","content":"<!-- MarkdownTOC -->\n<ul>\n<li><a href=\"#io流学习总结\">IO流学习总结</a><ul>\n<li><a href=\"#一-java-io，硬骨头也能变软\">一　Java IO，硬骨头也能变软</a></li>\n<li><a href=\"#二-java-io体系的学习总结\">二　java IO体系的学习总结</a></li>\n<li><a href=\"#三-java-io面试题\">三　Java IO面试题</a></li>\n</ul>\n</li>\n<li><a href=\"#nio与aio学习总结\">NIO与AIO学习总结</a><ul>\n<li><a href=\"#一-java-nio-概览\">一 Java NIO 概览</a></li>\n<li><a href=\"#二-java-nio-之-buffer缓冲区\">二 Java NIO 之 Buffer(缓冲区)</a></li>\n<li><a href=\"#三-java-nio-之-channel（通道）\">三 Java NIO 之 Channel（通道）</a></li>\n<li><a href=\"#四-java-nio之selector（选择器）\">四 Java NIO之Selector（选择器）</a></li>\n<li><a href=\"#五-java-nio之拥抱path和files\">五 Java NIO之拥抱Path和Files</a></li>\n<li><a href=\"#六-nio学习总结以及nio新特性介绍\">六 NIO学习总结以及NIO新特性介绍</a></li>\n<li><a href=\"#七-java-nio-asynchronousfilechannel异步文件通\">七 Java NIO AsynchronousFileChannel异步文件通</a></li>\n<li><a href=\"#八-高并发java（8）：nio和aio\">八 高并发Java（8）：NIO和AIO</a></li>\n</ul>\n</li>\n<li><a href=\"#推荐阅读\">推荐阅读</a><ul>\n<li><a href=\"#在-java-7-中体会-nio2-异步执行的快乐\">在 Java 7 中体会 NIO.2 异步执行的快乐</a></li>\n<li><a href=\"#java-aio总结与示例\">Java AIO总结与示例</a></li>\n</ul>\n</li>\n</ul>\n<!-- /MarkdownTOC -->\n<h2 id=\"IO流学习总结\"><a href=\"#IO流学习总结\" class=\"headerlink\" title=\"IO流学习总结\"></a>IO流学习总结</h2><h3 id=\"一-Java-IO，硬骨头也能变软\"><a href=\"#一-Java-IO，硬骨头也能变软\" class=\"headerlink\" title=\"一　Java IO，硬骨头也能变软\"></a><a href=\"https://mp.weixin.qq.com/s?__biz=MzU4NDQ4MzU5OA==&amp;mid=2247483981&amp;idx=1&amp;sn=6e5c682d76972c8d2cf271a85dcf09e2&amp;chksm=fd98542ccaefdd3a70428e9549bc33e8165836855edaa748928d16c1ebde9648579d3acaac10#rd\" target=\"_blank\" rel=\"noopener\">一　Java IO，硬骨头也能变软</a></h3><p><strong>（1） 按操作方式分类结构图：</strong></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/5/16/16367d4fd1ce1b46?w=720&amp;h=1080&amp;f=jpeg&amp;s=69522\" alt=\"按操作方式分类结构图：\"></p>\n<p><strong>（2）按操作对象分类结构图</strong></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/5/16/16367d673b0e268d?w=720&amp;h=535&amp;f=jpeg&amp;s=46081\" alt=\"按操作对象分类结构图\"></p>\n<h3 id=\"二-java-IO体系的学习总结\"><a href=\"#二-java-IO体系的学习总结\" class=\"headerlink\" title=\"二　java IO体系的学习总结\"></a><a href=\"https://blog.csdn.net/nightcurtis/article/details/51324105\" target=\"_blank\" rel=\"noopener\">二　java IO体系的学习总结</a></h3><ol>\n<li><strong>IO流的分类：</strong><ul>\n<li>按照流的流向分，可以分为输入流和输出流；</li>\n<li>按照操作单元划分，可以划分为字节流和字符流；</li>\n<li>按照流的角色划分为节点流和处理流。</li>\n</ul>\n</li>\n<li><p><strong>流的原理浅析:</strong></p>\n<p>java Io流共涉及40多个类，这些类看上去很杂乱，但实际上很有规则，而且彼此之间存在非常紧密的联系， Java Io流的40多个类都是从如下4个抽象类基类中派生出来的。</p>\n<ul>\n<li><strong>InputStream/Reader</strong>: 所有的输入流的基类，前者是字节输入流，后者是字符输入流。</li>\n<li><strong>OutputStream/Writer</strong>: 所有输出流的基类，前者是字节输出流，后者是字符输出流。</li>\n</ul>\n</li>\n<li><strong>常用的io流的用法</strong> </li>\n</ol>\n<h3 id=\"三-Java-IO面试题\"><a href=\"#三-Java-IO面试题\" class=\"headerlink\" title=\"三　Java IO面试题\"></a><a href=\"https://mp.weixin.qq.com/s?__biz=MzU4NDQ4MzU5OA==&amp;mid=2247483985&amp;idx=1&amp;sn=38531c2cee7b87f125df7aef41637014&amp;chksm=fd985430caefdd26b0506aa84fc26251877eccba24fac73169a4d6bd1eb5e3fbdf3c3b940261#rd\" target=\"_blank\" rel=\"noopener\">三　Java IO面试题</a></h3><h2 id=\"NIO与AIO学习总结\"><a href=\"#NIO与AIO学习总结\" class=\"headerlink\" title=\"NIO与AIO学习总结\"></a>NIO与AIO学习总结</h2><h3 id=\"一-Java-NIO-概览\"><a href=\"#一-Java-NIO-概览\" class=\"headerlink\" title=\"一 Java NIO 概览\"></a><a href=\"https://mp.weixin.qq.com/s?__biz=MzU4NDQ4MzU5OA==&amp;mid=2247483956&amp;idx=1&amp;sn=57692bc5b7c2c6dfb812489baadc29c9&amp;chksm=fd985455caefdd4331d828d8e89b22f19b304aa87d6da73c5d8c66fcef16e4c0b448b1a6f791#rd\" target=\"_blank\" rel=\"noopener\">一 Java NIO 概览</a></h3><ol>\n<li><p><strong>NIO简介</strong>:</p>\n<p>Java NIO 是 java 1.4, 之后新出的一套IO接口NIO中的N可以理解为Non-blocking，不单纯是New。</p>\n</li>\n<li><p><strong>NIO的特性/NIO与IO区别:</strong></p>\n<ul>\n<li>1)IO是面向流的，NIO是面向缓冲区的；</li>\n<li>2)IO流是阻塞的，NIO流是不阻塞的;</li>\n<li>3)NIO有选择器，而IO没有。</li>\n</ul>\n</li>\n<li><p><strong>读数据和写数据方式:</strong></p>\n<ul>\n<li><p>从通道进行数据读取 ：创建一个缓冲区，然后请求通道读取数据。</p>\n</li>\n<li><p>从通道进行数据写入 ：创建一个缓冲区，填充数据，并要求通道写入数据。</p>\n</li>\n</ul>\n</li>\n<li><p><strong>NIO核心组件简单介绍</strong></p>\n<ul>\n<li><strong>Channels</strong></li>\n<li><strong>Buffers</strong></li>\n<li><strong>Selectors</strong></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"二-Java-NIO-之-Buffer-缓冲区\"><a href=\"#二-Java-NIO-之-Buffer-缓冲区\" class=\"headerlink\" title=\"二 Java NIO 之 Buffer(缓冲区)\"></a><a href=\"https://mp.weixin.qq.com/s?__biz=MzU4NDQ4MzU5OA==&amp;mid=2247483961&amp;idx=1&amp;sn=f67bef4c279e78043ff649b6b03fdcbc&amp;chksm=fd985458caefdd4e3317ccbdb2d0a5a70a5024d3255eebf38183919ed9c25ade536017c0a6ba#rd\" target=\"_blank\" rel=\"noopener\">二 Java NIO 之 Buffer(缓冲区)</a></h3><ol>\n<li><strong>Buffer(缓冲区)介绍:</strong><ul>\n<li>Java NIO Buffers用于和NIO Channel交互。 我们从Channel中读取数据到buffers里，从Buffer把数据写入到Channels；</li>\n<li>Buffer本质上就是一块内存区；</li>\n<li>一个Buffer有三个属性是必须掌握的，分别是：capacity容量、position位置、limit限制。</li>\n</ul>\n</li>\n<li><strong>Buffer的常见方法</strong><ul>\n<li>Buffer clear()</li>\n<li>Buffer flip()</li>\n<li>Buffer rewind()</li>\n<li>Buffer position(int newPosition)</li>\n</ul>\n</li>\n<li><p><strong>Buffer的使用方式/方法介绍:</strong></p>\n<ul>\n<li><p>分配缓冲区（Allocating a Buffer）:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ByteBuffer buf = ByteBuffer.allocate(<span class=\"number\">28</span>);<span class=\"comment\">//以ByteBuffer为例子</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>写入数据到缓冲区（Writing Data to a Buffer）</p>\n<p><strong>写数据到Buffer有两种方法：</strong></p>\n<p>1.从Channel中写数据到Buffer</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> bytesRead = inChannel.read(buf); <span class=\"comment\">//read into buffer.</span></span><br></pre></td></tr></table></figure>\n<p>2.通过put写数据：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buf.put(<span class=\"number\">127</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p><strong>Buffer常用方法测试</strong></p>\n<p> 说实话，NIO编程真的难，通过后面这个测试例子，你可能才能勉强理解前面说的Buffer方法的作用。</p>\n</li>\n</ol>\n<h3 id=\"三-Java-NIO-之-Channel（通道）\"><a href=\"#三-Java-NIO-之-Channel（通道）\" class=\"headerlink\" title=\"三 Java NIO 之 Channel（通道）\"></a><a href=\"https://mp.weixin.qq.com/s?__biz=MzU4NDQ4MzU5OA==&amp;mid=2247483966&amp;idx=1&amp;sn=d5cf18c69f5f9ec2aff149270422731f&amp;chksm=fd98545fcaefdd49296e2c78000ce5da277435b90ba3c03b92b7cf54c6ccc71d61d13efbce63#rd\" target=\"_blank\" rel=\"noopener\">三 Java NIO 之 Channel（通道）</a></h3><ol>\n<li><strong>Channel（通道）介绍</strong><ul>\n<li>通常来说NIO中的所有IO都是从 Channel（通道） 开始的。 </li>\n<li>NIO Channel通道和流的区别：</li>\n</ul>\n</li>\n<li><strong>FileChannel的使用</strong></li>\n<li><strong>SocketChannel和ServerSocketChannel的使用</strong></li>\n<li><strong>️DatagramChannel的使用</strong></li>\n<li><strong>Scatter / Gather</strong><ul>\n<li>Scatter: 从一个Channel读取的信息分散到N个缓冲区中(Buufer).</li>\n<li>Gather: 将N个Buffer里面内容按照顺序发送到一个Channel.</li>\n</ul>\n</li>\n<li><strong>通道之间的数据传输</strong><ul>\n<li>在Java NIO中如果一个channel是FileChannel类型的，那么他可以直接把数据传输到另一个channel。</li>\n<li>transferFrom() :transferFrom方法把数据从通道源传输到FileChannel</li>\n<li>transferTo() :transferTo方法把FileChannel数据传输到另一个channel</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"四-Java-NIO之Selector（选择器）\"><a href=\"#四-Java-NIO之Selector（选择器）\" class=\"headerlink\" title=\"四 Java NIO之Selector（选择器）\"></a><a href=\"https://mp.weixin.qq.com/s?__biz=MzU4NDQ4MzU5OA==&amp;mid=2247483970&amp;idx=1&amp;sn=d5e2b133313b1d0f32872d54fbdf0aa7&amp;chksm=fd985423caefdd354b587e57ce6cf5f5a7bec48b9ab7554f39a8d13af47660cae793956e0f46#rd\" target=\"_blank\" rel=\"noopener\">四 Java NIO之Selector（选择器）</a></h3><ol>\n<li><strong>Selector（选择器）介绍</strong><ul>\n<li>Selector 一般称 为选择器 ，当然你也可以翻译为 多路复用器 。它是Java NIO核心组件中的一个，用于检查一个或多个NIO Channel（通道）的状态是否处于可读、可写。如此可以实现单线程管理多个channels,也就是可以管理多个网络链接。</li>\n<li>使用Selector的好处在于： 使用更少的线程来就可以来处理通道了， 相比使用多个线程，避免了线程上下文切换带来的开销。</li>\n</ul>\n</li>\n<li><p><strong>Selector（选择器）的使用方法介绍</strong></p>\n<ul>\n<li><p>Selector的创建</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Selector selector = Selector.open();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>注册Channel到Selector(Channel必须是非阻塞的)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channel.configureBlocking(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">SelectionKey key = channel.register(selector, Selectionkey.OP_READ);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>SelectionKey介绍</p>\n<p>一个SelectionKey键表示了一个特定的通道对象和一个特定的选择器对象之间的注册关系。</p>\n</li>\n<li><p>从Selector中选择channel(Selecting Channels via a Selector)</p>\n<p>选择器维护注册过的通道的集合，并且这种注册关系都被封装在SelectionKey当中.</p>\n</li>\n<li><p>停止选择的方法</p>\n<p>wakeup()方法 和close()方法。</p>\n</li>\n</ul>\n</li>\n<li><p><strong>模板代码</strong></p>\n<p>有了模板代码我们在编写程序时，大多数时间都是在模板代码中添加相应的业务代码。</p>\n</li>\n<li><strong>客户端与服务端简单交互实例</strong></li>\n</ol>\n<h3 id=\"五-Java-NIO之拥抱Path和Files\"><a href=\"#五-Java-NIO之拥抱Path和Files\" class=\"headerlink\" title=\"五 Java NIO之拥抱Path和Files\"></a><a href=\"https://mp.weixin.qq.com/s?__biz=MzU4NDQ4MzU5OA==&amp;mid=2247483976&amp;idx=1&amp;sn=2296c05fc1b840a64679e2ad7794c96d&amp;chksm=fd985429caefdd3f48e2ee6fdd7b0f6fc419df90b3de46832b484d6d1ca4e74e7837689c8146&amp;token=537240785&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">五 Java NIO之拥抱Path和Files</a></h3><p><strong>一 文件I/O基石：Path：</strong></p>\n<ul>\n<li>创建一个Path</li>\n<li>File和Path之间的转换，File和URI之间的转换</li>\n<li>获取Path的相关信息</li>\n<li>移除Path中的冗余项</li>\n</ul>\n<p><strong>二 拥抱Files类：</strong></p>\n<ul>\n<li>Files.exists() 检测文件路径是否存在</li>\n<li>Files.createFile() 创建文件</li>\n<li>Files.createDirectories()和Files.createDirectory()创建文件夹</li>\n<li>Files.delete()方法 可以删除一个文件或目录</li>\n<li>Files.copy()方法可以吧一个文件从一个地址复制到另一个位置</li>\n<li>获取文件属性</li>\n<li>遍历一个文件夹</li>\n<li>Files.walkFileTree()遍历整个目录</li>\n</ul>\n<h3 id=\"六-NIO学习总结以及NIO新特性介绍\"><a href=\"#六-NIO学习总结以及NIO新特性介绍\" class=\"headerlink\" title=\"六 NIO学习总结以及NIO新特性介绍\"></a><a href=\"https://blog.csdn.net/a953713428/article/details/64907250\" target=\"_blank\" rel=\"noopener\">六 NIO学习总结以及NIO新特性介绍</a></h3><ul>\n<li><strong>内存映射：</strong></li>\n</ul>\n<p>这个功能主要是为了提高大文件的读写速度而设计的。内存映射文件(memory-mappedfile)能让你创建和修改那些大到无法读入内存的文件。有了内存映射文件，你就可以认为文件已经全部读进了内存，然后把它当成一个非常大的数组来访问了。将文件的一段区域映射到内存中，比传统的文件处理速度要快很多。内存映射文件它虽然最终也是要从磁盘读取数据，但是它并不需要将数据读取到OS内核缓冲区，而是直接将进程的用户私有地址空间中的一部分区域与文件对象建立起映射关系，就好像直接从内存中读、写文件一样，速度当然快了。</p>\n<h3 id=\"七-Java-NIO-AsynchronousFileChannel异步文件通\"><a href=\"#七-Java-NIO-AsynchronousFileChannel异步文件通\" class=\"headerlink\" title=\"七 Java NIO AsynchronousFileChannel异步文件通\"></a><a href=\"http://wiki.jikexueyuan.com/project/java-nio-zh/java-nio-asynchronousfilechannel.html\" target=\"_blank\" rel=\"noopener\">七 Java NIO AsynchronousFileChannel异步文件通</a></h3><p>Java7中新增了AsynchronousFileChannel作为nio的一部分。AsynchronousFileChannel使得数据可以进行异步读写。</p>\n<h3 id=\"八-高并发Java（8）：NIO和AIO\"><a href=\"#八-高并发Java（8）：NIO和AIO\" class=\"headerlink\" title=\"八 高并发Java（8）：NIO和AIO\"></a><a href=\"http://www.importnew.com/21341.html\" target=\"_blank\" rel=\"noopener\">八 高并发Java（8）：NIO和AIO</a></h3><h2 id=\"推荐阅读\"><a href=\"#推荐阅读\" class=\"headerlink\" title=\"推荐阅读\"></a>推荐阅读</h2><h3 id=\"在-Java-7-中体会-NIO-2-异步执行的快乐\"><a href=\"#在-Java-7-中体会-NIO-2-异步执行的快乐\" class=\"headerlink\" title=\"在 Java 7 中体会 NIO.2 异步执行的快乐\"></a><a href=\"https://www.ibm.com/developerworks/cn/java/j-lo-nio2/index.html\" target=\"_blank\" rel=\"noopener\">在 Java 7 中体会 NIO.2 异步执行的快乐</a></h3><h3 id=\"Java-AIO总结与示例\"><a href=\"#Java-AIO总结与示例\" class=\"headerlink\" title=\"Java AIO总结与示例\"></a><a href=\"https://blog.csdn.net/x_i_y_u_e/article/details/52223406\" target=\"_blank\" rel=\"noopener\">Java AIO总结与示例</a></h3><p>AIO是异步IO的缩写，虽然NIO在网络操作中，提供了非阻塞的方法，但是NIO的IO行为还是同步的。对于NIO来说，我们的业务线程是在IO操作准备好时，得到通知，接着就由这个线程自行进行IO操作，IO操作本身是同步的。</p>\n<p><strong>欢迎关注我的微信公众号:”Java面试通关手册”（一个有温度的微信公众号，期待与你共同进步~~~坚持原创，分享美文，分享各种Java学习资源）：</strong></p>\n","prev":{"title":"LinkList 双端链表","slug":"LinkedList"},"next":{"title":"JAVA 基础","slug":"Java基础知识"},"link":"http://ziyaofeng.github.io/2017/12/03/Java IO与NIO/","toc":[{"title":"IO流学习总结","id":"IO流学习总结","index":"1","children":[{"title":"<a href=\"https://mp.weixin.qq.com/s?__biz=MzU4NDQ4MzU5OA==&amp;mid=2247483981&amp;idx=1&amp;sn=6e5c682d76972c8d2cf271a85dcf09e2&amp;chksm=fd98542ccaefdd3a70428e9549bc33e8165836855edaa748928d16c1ebde9648579d3acaac10#rd\" target=\"_blank\" rel=\"noopener\">一　Java IO，硬骨头也能变软</a>","id":"一-Java-IO，硬骨头也能变软","index":"1.1"},{"title":"<a href=\"https://blog.csdn.net/nightcurtis/article/details/51324105\" target=\"_blank\" rel=\"noopener\">二　java IO体系的学习总结</a>","id":"二-java-IO体系的学习总结","index":"1.2"},{"title":"<a href=\"https://mp.weixin.qq.com/s?__biz=MzU4NDQ4MzU5OA==&amp;mid=2247483956&amp;idx=1&amp;sn=57692bc5b7c2c6dfb812489baadc29c9&amp;chksm=fd985455caefdd4331d828d8e89b22f19b304aa87d6da73c5d8c66fcef16e4c0b448b1a6f791#rd\" target=\"_blank\" rel=\"noopener\">一 Java NIO 概览</a>","id":"一-Java-NIO-概览","index":"1.3"},{"title":"<a href=\"https://mp.weixin.qq.com/s?__biz=MzU4NDQ4MzU5OA==&amp;mid=2247483961&amp;idx=1&amp;sn=f67bef4c279e78043ff649b6b03fdcbc&amp;chksm=fd985458caefdd4e3317ccbdb2d0a5a70a5024d3255eebf38183919ed9c25ade536017c0a6ba#rd\" target=\"_blank\" rel=\"noopener\">二 Java NIO 之 Buffer(缓冲区)</a>","id":"二-Java-NIO-之-Buffer-缓冲区","index":"1.4"},{"title":"<a href=\"https://mp.weixin.qq.com/s?__biz=MzU4NDQ4MzU5OA==&amp;mid=2247483966&amp;idx=1&amp;sn=d5cf18c69f5f9ec2aff149270422731f&amp;chksm=fd98545fcaefdd49296e2c78000ce5da277435b90ba3c03b92b7cf54c6ccc71d61d13efbce63#rd\" target=\"_blank\" rel=\"noopener\">三 Java NIO 之 Channel（通道）</a>","id":"三-Java-NIO-之-Channel（通道）","index":"1.5"},{"title":"<a href=\"https://mp.weixin.qq.com/s?__biz=MzU4NDQ4MzU5OA==&amp;mid=2247483970&amp;idx=1&amp;sn=d5e2b133313b1d0f32872d54fbdf0aa7&amp;chksm=fd985423caefdd354b587e57ce6cf5f5a7bec48b9ab7554f39a8d13af47660cae793956e0f46#rd\" target=\"_blank\" rel=\"noopener\">四 Java NIO之Selector（选择器）</a>","id":"四-Java-NIO之Selector（选择器）","index":"1.6"},{"title":"<a href=\"https://mp.weixin.qq.com/s?__biz=MzU4NDQ4MzU5OA==&amp;mid=2247483976&amp;idx=1&amp;sn=2296c05fc1b840a64679e2ad7794c96d&amp;chksm=fd985429caefdd3f48e2ee6fdd7b0f6fc419df90b3de46832b484d6d1ca4e74e7837689c8146&amp;token=537240785&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">五 Java NIO之拥抱Path和Files</a>","id":"五-Java-NIO之拥抱Path和Files","index":"1.7"},{"title":"<a href=\"https://blog.csdn.net/a953713428/article/details/64907250\" target=\"_blank\" rel=\"noopener\">六 NIO学习总结以及NIO新特性介绍</a>","id":"六-NIO学习总结以及NIO新特性介绍","index":"1.8"},{"title":"<a href=\"http://wiki.jikexueyuan.com/project/java-nio-zh/java-nio-asynchronousfilechannel.html\" target=\"_blank\" rel=\"noopener\">七 Java NIO AsynchronousFileChannel异步文件通</a>","id":"七-Java-NIO-AsynchronousFileChannel异步文件通","index":"1.9"},{"title":"<a href=\"https://blog.csdn.net/x_i_y_u_e/article/details/52223406\" target=\"_blank\" rel=\"noopener\">Java AIO总结与示例</a>","id":"Java-AIO总结与示例","index":"1.10"}]}]}