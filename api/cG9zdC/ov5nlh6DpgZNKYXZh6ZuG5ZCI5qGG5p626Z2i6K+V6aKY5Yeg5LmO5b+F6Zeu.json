{"title":"","date":"2018-09-21T01:04:07.227Z","excerpt":"","slug":"这几道Java集合框架面试题几乎必问","updated":"2018-09-20T07:31:28.000Z","content":"<blockquote>\n<p>本文是“最最最常见Java面试题总结”系列第三周的文章。<br>主要内容：</p>\n<ol>\n<li>Arraylist 与 LinkedList 异同</li>\n<li>ArrayList 与 Vector 区别</li>\n<li>HashMap的底层实现</li>\n<li>HashMap 和 Hashtable 的区别</li>\n<li>HashMap 的长度为什么是2的幂次方</li>\n<li>HashMap 多线程操作导致死循环问题</li>\n<li>HashSet 和 HashMap 区别</li>\n<li>ConcurrentHashMap 和 Hashtable 的区别</li>\n<li>ConcurrentHashMap线程安全的具体实现方式/底层具体实现</li>\n<li>集合框架底层数据结构总结</li>\n</ol>\n</blockquote>\n<h2 id=\"Arraylist-与-LinkedList-异同\"><a href=\"#Arraylist-与-LinkedList-异同\" class=\"headerlink\" title=\"Arraylist 与 LinkedList 异同\"></a>Arraylist 与 LinkedList 异同</h2><ul>\n<li><strong>1. 是否保证线程安全：</strong> ArrayList 和 LinkedList 都是不同步的，也就是不保证线程安全；</li>\n<li><strong>2. 底层数据结构：</strong> Arraylist 底层使用的是Object数组；LinkedList 底层使用的是双向循环链表数据结构；</li>\n<li><strong>3. 插入和删除是否受元素位置的影响：</strong> ① <strong>ArrayList 采用数组存储，所以插入和删除元素的时间复杂度受元素位置的影响。</strong> 比如：执行<code>add(E e)</code>方法的时候， ArrayList 会默认在将指定的元素追加到此列表的末尾，这种情况时间复杂度就是O(1)。但是如果要在指定位置 i 插入和删除元素的话（<code>add(int index, E element)</code>）时间复杂度就为 O(n-i)。因为在进行上述操作的时候集合中第 i 和第 i 个元素之后的(n-i)个元素都要执行向后位/向前移一位的操作。 ② <strong>LinkedList 采用链表存储，所以插入，删除元素时间复杂度不受元素位置的影响，都是近似 O（1）而数组为近似 O（n）。</strong></li>\n<li><strong>4. 是否支持快速随机访问：</strong> LinkedList 不支持高效的随机元素访问，而ArrayList 实现了RandmoAccess 接口，所以有随机访问功能。快速随机访问就是通过元素的序号快速获取元素对象(对应于<code>get(int index)</code>方法)。</li>\n<li><strong>5. 内存空间占用：</strong> ArrayList的空 间浪费主要体现在在list列表的结尾会预留一定的容量空间，而LinkedList的空间花费则体现在它的每一个元素都需要消耗比ArrayList更多的空间（因为要存放直接后继和直接前驱以及数据）。 </li>\n</ul>\n<h3 id=\"补充：数据结构基础之双向链表\"><a href=\"#补充：数据结构基础之双向链表\" class=\"headerlink\" title=\"补充：数据结构基础之双向链表\"></a>补充：数据结构基础之双向链表</h3><p>双向链表也叫双链表，是链表的一种，它的每个数据结点中都有两个指针，分别指向直接后继和直接前驱。所以，从双向链表中的任意一个结点开始，都可以很方便地访问它的前驱结点和后继结点。一般我们都构造双向循环链表，如下图所示，同时下图也是LinkedList 底层使用的是双向循环链表数据结构。</p>\n<p><img src=\"http://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-8-21/88766727.jpg\" alt=\"\"></p>\n<h2 id=\"ArrayList-与-Vector-区别\"><a href=\"#ArrayList-与-Vector-区别\" class=\"headerlink\" title=\"ArrayList 与 Vector 区别\"></a>ArrayList 与 Vector 区别</h2><p> Vector类的所有方法都是同步的。可以由两个线程安全地访问一个Vector对象、但是一个线程访问Vector的话代码要在同步操作上耗费大量的时间。</p>\n<p>Arraylist不是同步的，所以在不需要保证线程安全时时建议使用Arraylist。</p>\n<h2 id=\"HashMap的底层实现\"><a href=\"#HashMap的底层实现\" class=\"headerlink\" title=\"HashMap的底层实现\"></a>HashMap的底层实现</h2><h3 id=\"JDK1-8之前\"><a href=\"#JDK1-8之前\" class=\"headerlink\" title=\"JDK1.8之前\"></a>JDK1.8之前</h3><p>JDK1.8 之前 HashMap 底层是 <strong>数组和链表</strong> 结合在一起使用也就是 <strong>链表散列</strong>。<strong>HashMap 通过 key 的 hashCode 经过扰动函数处理过后得到 hash  值，然后通过 <code>(n - 1) &amp; hash</code> 判断当前元素存放的位置（这里的 n 指的时数组的长度），如果当前位置存在元素的话，就判断该元素与要存入的元素的 hash 值以及 key 是否相同，如果相同的话，直接覆盖，不相同就通过拉链法解决冲突。</strong></p>\n<p><strong>所谓扰动函数指的就是 HashMap 的 hash 方法。使用 hash 方法也就是扰动函数是为了防止一些实现比较差的 hashCode() 方法 换句话说使用扰动函数之后可以减少碰撞。</strong></p>\n<p><strong>JDK 1.8 HashMap 的 hash 方法源码:</strong></p>\n<p>JDK 1.8 的 hash方法 相比于 JDK 1.7 hash 方法更加简化，但是原理不变。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">hash</span><span class=\"params\">(Object key)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> h;</span><br><span class=\"line\">    <span class=\"comment\">// key.hashCode()：返回散列值也就是hashcode</span></span><br><span class=\"line\">    <span class=\"comment\">// ^ ：按位异或</span></span><br><span class=\"line\">    <span class=\"comment\">// &gt;&gt;&gt;:无符号右移，忽略符号位，空位都以0补齐</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (key == <span class=\"keyword\">null</span>) ? <span class=\"number\">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class=\"number\">16</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对比一下 JDK1.7的 HashMap 的 hash 方法源码.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">hash</span><span class=\"params\">(<span class=\"keyword\">int</span> h)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// This function ensures that hashCodes that differ only by</span></span><br><span class=\"line\">    <span class=\"comment\">// constant multiples at each bit position have a bounded</span></span><br><span class=\"line\">    <span class=\"comment\">// number of collisions (approximately 8 at default load factor).</span></span><br><span class=\"line\"></span><br><span class=\"line\">    h ^= (h &gt;&gt;&gt; <span class=\"number\">20</span>) ^ (h &gt;&gt;&gt; <span class=\"number\">12</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> h ^ (h &gt;&gt;&gt; <span class=\"number\">7</span>) ^ (h &gt;&gt;&gt; <span class=\"number\">4</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>相比于 JDK1.8 的 hash 方法 ，JDK 1.7 的 hash 方法的性能会稍差一点点，因为毕竟扰动了 4 次。</p>\n<p>所谓 <strong>“拉链法”</strong> 就是：将链表和数组相结合。也就是说创建一个链表数组，数组中每一格就是一个链表。若遇到哈希冲突，则将冲突的值加到链表中即可。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/3/20/16240dbcc303d872?w=348&amp;h=427&amp;f=png&amp;s=10991\" alt=\"jdk1.8之前的内部结构\"></p>\n<h3 id=\"JDK1-8之后\"><a href=\"#JDK1-8之后\" class=\"headerlink\" title=\"JDK1.8之后\"></a>JDK1.8之后</h3><p>相比于之前的版本， JDK1.8之后在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为8）时，将链表转化为红黑树，以减少搜索时间。</p>\n<p><img src=\"http://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-8-22/67233764.jpg\" alt=\"JDK1.8之后的HashMap底层数据结构\"></p>\n<blockquote>\n<p>TreeMap、TreeSet以及JDK1.8之后的HashMap底层都用到了红黑树。红黑树就是为了解决二叉查找树的缺陷，因为二叉查找树在某些情况下会退化成一个线性结构。</p>\n</blockquote>\n<p><strong>推荐阅读：</strong></p>\n<ul>\n<li>《Java 8系列之重新认识HashMap》 ：<a href=\"https://zhuanlan.zhihu.com/p/21673805\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/21673805</a></li>\n</ul>\n<h2 id=\"HashMap-和-Hashtable-的区别\"><a href=\"#HashMap-和-Hashtable-的区别\" class=\"headerlink\" title=\"HashMap 和 Hashtable 的区别\"></a>HashMap 和 Hashtable 的区别</h2><ol>\n<li><strong>线程是否安全：</strong> HashMap 是非线程安全的，HashTable 是线程安全的；HashTable 内部的方法基本都经过  <code>synchronized</code>  修饰。（如果你要保证线程安全的话就使用 ConcurrentHashMap 吧！）；</li>\n<li><strong>效率：</strong> 因为线程安全的问题，HashMap 要比 HashTable 效率高一点。另外，HashTable 基本被淘汰，不要在代码中使用它；</li>\n<li><strong>对Null key 和Null value的支持：</strong> HashMap 中，null 可以作为键，这样的键只有一个，可以有一个或多个键所对应的值为 null。。但是在 HashTable 中 put 进的键值只要有一个 null，直接抛出 NullPointerException。</li>\n<li><strong>初始容量大小和每次扩充容量大小的不同 ：</strong>   ①创建时如果不指定容量初始值，Hashtable 默认的初始大小为11，之后每次扩充，容量变为原来的2n+1。HashMap 默认的初始化大小为16。之后每次扩充，容量变为原来的2倍。②创建时如果给定了容量初始值，那么 Hashtable 会直接使用你给定的大小，而 HashMap 会将其扩充为2的幂次方大小。也就是说 HashMap 总是使用2的幂作为哈希表的大小,后面会介绍到为什么是2的幂次方。</li>\n<li><strong>底层数据结构：</strong> JDK1.8 以后的 HashMap 在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为8）时，将链表转化为红黑树，以减少搜索时间。Hashtable 没有这样的机制。</li>\n</ol>\n<h2 id=\"HashMap-的长度为什么是2的幂次方\"><a href=\"#HashMap-的长度为什么是2的幂次方\" class=\"headerlink\" title=\"HashMap 的长度为什么是2的幂次方\"></a>HashMap 的长度为什么是2的幂次方</h2><p>为了能让 HashMap 存取高效，尽量较少碰撞，也就是要尽量把数据分配均匀。我们上面也讲到了过了，Hash 值的范围值-2147483648到2147483648，前后加起来大概40亿的映射空间，只要哈希函数映射得比较均匀松散，一般应用是很难出现碰撞的。但问题是一个40亿长度的数组，内存是放不下的。所以这个散列值是不能直接拿来用的。用之前还要先做对数组的长度取模运算，得到的余数才能用来要存放的位置也就是对应的数组下标。这个数组下标的计算方法是“ <code>(n - 1) &amp; hash</code> ”。（n代表数组长度）。这也就解释了 HashMap 的长度为什么是2的幂次方。</p>\n<p><strong>这个算法应该如何设计呢？</strong></p>\n<p>我们首先可能会想到采用%取余的操作来实现。但是，重点来了：<strong>“取余(%)操作中如果除数是2的幂次则等价于与其除数减一的与(&amp;)操作（也就是说 hash%length==hash&amp;(length-1)的前提是 length 是2的 n 次方；）。”</strong> 并且 <strong>采用二进制位操作 &amp;，相对于%能够提高运算效率，这就解释了 HashMap 的长度为什么是2的幂次方。</strong></p>\n<h2 id=\"HashMap-多线程操作导致死循环问题\"><a href=\"#HashMap-多线程操作导致死循环问题\" class=\"headerlink\" title=\"HashMap 多线程操作导致死循环问题\"></a>HashMap 多线程操作导致死循环问题</h2><p>在多线程下，进行 put 操作会导致 HashMap 死循环，原因在于 HashMap 的扩容 resize()方法。由于扩容是新建一个数组，复制原数据到数组。由于数组下标挂有链表，所以需要复制链表，但是多线程操作有可能导致环形链表。复制链表过程如下:<br>以下模拟2个线程同时扩容。假设，当前 HashMap 的空间为2（临界值为1），hashcode 分别为 0 和 1，在散列地址 0 处有元素 A 和 B，这时候要添加元素 C，C 经过 hash 运算，得到散列地址为 1，这时候由于超过了临界值，空间不够，需要调用 resize 方法进行扩容，那么在多线程条件下，会出现条件竞争，模拟过程如下：</p>\n<p> 线程一：读取到当前的 HashMap 情况，在准备扩容时，线程二介入</p>\n<p><img src=\"https://note.youdao.com/yws/public/resource/e4cec65883d9fdc24effba57dcfa5241/xmlnote/41aed567e3419e1314bfbf689e3255a2/192\" alt=\"\"></p>\n<p>线程二：读取 HashMap，进行扩容</p>\n<p><img src=\"https://note.youdao.com/yws/public/resource/e4cec65883d9fdc24effba57dcfa5241/xmlnote/f44624419c0a49686fb12aa37527ee65/191\" alt=\"\"></p>\n<p>线程一：继续执行</p>\n<p><img src=\"https://note.youdao.com/yws/public/resource/e4cec65883d9fdc24effba57dcfa5241/xmlnote/79424b2bf4a89902a9e85c64600268e4/193\" alt=\"\"></p>\n<p>这个过程为，先将 A 复制到新的 hash 表中，然后接着复制 B 到链头（A 的前边：B.next=A），本来 B.next=null，到此也就结束了（跟线程二一样的过程），但是，由于线程二扩容的原因，将 B.next=A，所以，这里继续复制A，让 A.next=B，由此，环形链表出现：B.next=A; A.next=B </p>\n<h2 id=\"HashSet-和-HashMap-区别\"><a href=\"#HashSet-和-HashMap-区别\" class=\"headerlink\" title=\"HashSet 和 HashMap 区别\"></a>HashSet 和 HashMap 区别</h2><p>如果你看过 HashSet 源码的话就应该知道：HashSet 底层就是基于 HashMap 实现的。（HashSet 的源码非常非常少，因为除了 clone() 方法、writeObject()方法、readObject()方法是 HashSet 自己不得不实现之外，其他方法都是直接调用 HashMap 中的方法。）</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/3/2/161e717d734f3b23?w=896&amp;h=363&amp;f=jpeg&amp;s=205536\" alt=\"HashSet 和 HashMap 区别\"></p>\n<h2 id=\"ConcurrentHashMap-和-Hashtable-的区别\"><a href=\"#ConcurrentHashMap-和-Hashtable-的区别\" class=\"headerlink\" title=\"ConcurrentHashMap 和 Hashtable 的区别\"></a>ConcurrentHashMap 和 Hashtable 的区别</h2><p>ConcurrentHashMap 和 Hashtable 的区别主要体现在实现线程安全的方式上不同。</p>\n<ul>\n<li><strong>底层数据结构：</strong> JDK1.7的 ConcurrentHashMap 底层采用 <strong>分段的数组+链表</strong> 实现，JDK1.8 采用的数据结构跟HashMap1.8的结构一样，数组+链表/红黑二叉树。Hashtable 和 JDK1.8 之前的 HashMap 的底层数据结构类似都是采用 <strong>数组+链表</strong> 的形式，数组是 HashMap 的主体，链表则是主要为了解决哈希冲突而存在的；</li>\n<li><strong>实现线程安全的方式（重要）：</strong> ① <strong>在JDK1.7的时候，ConcurrentHashMap（分段锁）</strong> 对整个桶数组进行了分割分段(Segment)，每一把锁只锁容器其中一部分数据，多线程访问容器里不同数据段的数据，就不会存在锁竞争，提高并发访问率。（默认分配16个Segment，比Hashtable效率提高16倍。） <strong>到了 JDK1.8 的时候已经摒弃了Segment的概念，而是直接用 Node 数组+链表+红黑树的数据结构来实现，并发控制使用 synchronized 和 CAS 来操作。（JDK1.6以后 对 synchronized锁做了很多优化）</strong>  整个看起来就像是优化过且线程安全的 HashMap，虽然在JDK1.8中还能看到 Segment 的数据结构，但是已经简化了属性，只是为了兼容旧版本；② <strong>Hashtable(同一把锁)</strong> :使用 synchronized 来保证线程安全，效率非常低下。当一个线程访问同步方法时，其他线程也访问同步方法，可能会进入阻塞或轮询状态，如使用 put 添加元素，另一个线程不能使用 put 添加元素，也不能使用 get，竞争会越来越激烈效率越低。</li>\n</ul>\n<p><strong>两者的对比图：</strong> </p>\n<p>图片来源：<a href=\"http://www.cnblogs.com/chengxiao/p/6842045.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/chengxiao/p/6842045.html</a></p>\n<p>HashTable:<br><img src=\"http://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-8-22/50656681.jpg\" alt=\"\"></p>\n<p>JDK1.7的ConcurrentHashMap：<br><img src=\"http://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-8-22/33120488.jpg\" alt=\"\"><br>JDK1.8的ConcurrentHashMap（TreeBin: 红黑二叉树节点<br>Node: 链表节点）：<br><img src=\"http://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-8-22/97739220.jpg\" alt=\"\"></p>\n<h2 id=\"ConcurrentHashMap线程安全的具体实现方式-底层具体实现\"><a href=\"#ConcurrentHashMap线程安全的具体实现方式-底层具体实现\" class=\"headerlink\" title=\"ConcurrentHashMap线程安全的具体实现方式/底层具体实现\"></a>ConcurrentHashMap线程安全的具体实现方式/底层具体实现</h2><h3 id=\"JDK1-7（上面有示意图）\"><a href=\"#JDK1-7（上面有示意图）\" class=\"headerlink\" title=\"JDK1.7（上面有示意图）\"></a>JDK1.7（上面有示意图）</h3><p>首先将数据分为一段一段的存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据时，其他段的数据也能被其他线程访问。</p>\n<p><strong>ConcurrentHashMap 是由 Segment 数组结构和 HahEntry 数组结构组成</strong>。</p>\n<p>Segment 实现了 ReentrantLock,所以 Segment 是一种可重入锁，扮演锁的角色。HashEntry 用于存储键值对数据。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Segment</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">ReentrantLock</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>一个 ConcurrentHashMap 里包含一个 Segment 数组。Segment 的结构和HashMap类似，是一种数组和链表结构，一个 Segment 包含一个 HashEntry  数组，每个 HashEntry 是一个链表结构的元素，每个 Segment 守护着一个HashEntry数组里的元素，当对 HashEntry 数组的数据进行修改时，必须首先获得对应的 Segment的锁。</p>\n<h3 id=\"JDK1-8-（上面有示意图）\"><a href=\"#JDK1-8-（上面有示意图）\" class=\"headerlink\" title=\"JDK1.8 （上面有示意图）\"></a>JDK1.8 （上面有示意图）</h3><p>ConcurrentHashMap取消了Segment分段锁，采用CAS和synchronized来保证并发安全。数据结构跟HashMap1.8的结构类似，数组+链表/红黑二叉树。</p>\n<p>synchronized只锁定当前链表或红黑二叉树的首节点，这样只要hash不冲突，就不会产生并发，效率又提升N倍。</p>\n<h2 id=\"集合框架底层数据结构总结\"><a href=\"#集合框架底层数据结构总结\" class=\"headerlink\" title=\"集合框架底层数据结构总结\"></a>集合框架底层数据结构总结</h2><h3 id=\"Collection\"><a href=\"#Collection\" class=\"headerlink\" title=\"Collection\"></a>Collection</h3><h4 id=\"1-List\"><a href=\"#1-List\" class=\"headerlink\" title=\"1. List\"></a>1. List</h4><ul>\n<li><strong>Arraylist：</strong> Object数组</li>\n<li><strong>Vector：</strong> Object数组</li>\n<li><strong>LinkedList：</strong> 双向循环链表</li>\n</ul>\n<h4 id=\"2-Set\"><a href=\"#2-Set\" class=\"headerlink\" title=\"2. Set\"></a>2. Set</h4><ul>\n<li><strong>HashSet（无序，唯一）:</strong>  基于 HashMap 实现的，底层采用 HashMap 来保存元素</li>\n<li><strong>LinkedHashSet：</strong> LinkedHashSet 继承与 HashSet，并且其内部是通过 LinkedHashMap 来实现的。有点类似于我们之前说的LinkedHashMap 其内部是基于 Hashmap 实现一样，不过还是有一点点区别的。</li>\n<li><strong>TreeSet（有序，唯一）：</strong> 红黑树(自平衡的排序二叉树。)</li>\n</ul>\n<h3 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h3><ul>\n<li><strong>HashMap：</strong> JDK1.8之前HashMap由数组+链表组成的，数组是HashMap的主体，链表则是主要为了解决哈希冲突而存在的（“拉链法”解决冲突）.JDK1.8以后在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为8）时，将链表转化为红黑树，以减少搜索时间</li>\n<li><strong>LinkedHashMap:</strong> LinkedHashMap 继承自 HashMap，所以它的底层仍然是基于拉链式散列结构即由数组和链表或红黑树组成。另外，LinkedHashMap 在上面结构的基础上，增加了一条双向链表，使得上面的结构可以保持键值对的插入顺序。同时通过对链表进行相应的操作，实现了访问顺序相关逻辑。详细可以查看：<a href=\"https://www.imooc.com/article/22931\" target=\"_blank\" rel=\"noopener\">《LinkedHashMap 源码详细分析（JDK1.8）》</a></li>\n<li><strong>HashTable:</strong> 数组+链表组成的，数组是 HashMap 的主体，链表则是主要为了解决哈希冲突而存在的</li>\n<li><strong>TreeMap:</strong> 红黑树（自平衡的排序二叉树）</li>\n</ul>\n<h3 id=\"推荐阅读：\"><a href=\"#推荐阅读：\" class=\"headerlink\" title=\"推荐阅读：\"></a>推荐阅读：</h3><ul>\n<li><a href=\"https://blog.csdn.net/fjse51/article/details/55260493\" target=\"_blank\" rel=\"noopener\">jdk1.8中ConcurrentHashMap的实现原理</a></li>\n<li><a href=\"https://crossoverjie.top/2018/07/23/java-senior/ConcurrentHashMap/\" target=\"_blank\" rel=\"noopener\">HashMap? ConcurrentHashMap? 相信看完这篇没人能难住你！</a> </li>\n<li><a href=\"http://www.yuanrengu.com/index.php/2017-01-17.html\" target=\"_blank\" rel=\"noopener\">HASHMAP、HASHTABLE、CONCURRENTHASHMAP的原理与区别</a></li>\n<li><a href=\"https://www.cnblogs.com/chengxiao/p/6842045.html\" target=\"_blank\" rel=\"noopener\">ConcurrentHashMap实现原理及源码分析</a></li>\n<li><a href=\"https://blog.csdn.net/jianghuxiaojin/article/details/52006118#commentBox\" target=\"_blank\" rel=\"noopener\">java-并发-ConcurrentHashMap高并发机制-jdk1.8</a></li>\n</ul>\n","prev":{"title":"","slug":"Java集合框架常见面试题总结"},"next":{"title":"谷歌插件操作串口","slug":"Chrome API操作串口"},"link":"http://ziyaofeng.github.io/2018/09/21/这几道Java集合框架面试题几乎必问/","toc":[{"title":"Arraylist 与 LinkedList 异同","id":"Arraylist-与-LinkedList-异同","index":"1","children":[{"title":"补充：数据结构基础之双向链表","id":"补充：数据结构基础之双向链表","index":"1.1"}]},{"title":"ArrayList 与 Vector 区别","id":"ArrayList-与-Vector-区别","index":"2"},{"title":"HashMap的底层实现","id":"HashMap的底层实现","index":"3","children":[{"title":"JDK1.8之前","id":"JDK1-8之前","index":"3.1"},{"title":"JDK1.8之后","id":"JDK1-8之后","index":"3.2"}]},{"title":"HashMap 和 Hashtable 的区别","id":"HashMap-和-Hashtable-的区别","index":"4"},{"title":"HashMap 的长度为什么是2的幂次方","id":"HashMap-的长度为什么是2的幂次方","index":"5"},{"title":"HashMap 多线程操作导致死循环问题","id":"HashMap-多线程操作导致死循环问题","index":"6"},{"title":"HashSet 和 HashMap 区别","id":"HashSet-和-HashMap-区别","index":"7"},{"title":"ConcurrentHashMap 和 Hashtable 的区别","id":"ConcurrentHashMap-和-Hashtable-的区别","index":"8"},{"title":"ConcurrentHashMap线程安全的具体实现方式/底层具体实现","id":"ConcurrentHashMap线程安全的具体实现方式-底层具体实现","index":"9","children":[{"title":"JDK1.7（上面有示意图）","id":"JDK1-7（上面有示意图）","index":"9.1"},{"title":"JDK1.8 （上面有示意图）","id":"JDK1-8-（上面有示意图）","index":"9.2"}]},{"title":"集合框架底层数据结构总结","id":"集合框架底层数据结构总结","index":"10","children":[{"title":"Collection","id":"Collection","index":"10.1","children":[{"title":"1. List","id":"1-List","index":"10.1.1"},{"title":"2. Set","id":"2-Set","index":"10.1.2"}]},{"title":"Map","id":"Map","index":"10.2"},{"title":"推荐阅读：","id":"推荐阅读：","index":"10.3"}]}]}