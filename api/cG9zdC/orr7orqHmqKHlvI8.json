{"title":"设计模式","date":"2017-12-02T21:01:24.000Z","excerpt":"","slug":"设计模式","tags":["java基础"],"categories":["Java相关"],"updated":"2018-09-21T01:03:37.111Z","content":"<p>下面是自己学习设计模式的时候做的总结，有些是自己的原创文章，有些是网上写的比较好的文章，保存下来细细消化吧！</p>\n<h2 id=\"创建型模式：\"><a href=\"#创建型模式：\" class=\"headerlink\" title=\"创建型模式：\"></a>创建型模式：</h2><blockquote>\n<h3 id=\"创建型模式概述：\"><a href=\"#创建型模式概述：\" class=\"headerlink\" title=\"创建型模式概述：\"></a>创建型模式概述：</h3></blockquote>\n<ul>\n<li>创建型模式(Creational Pattern)对类的实例化过程进行了抽象，能够将软件模块中对象的创建和对象的使用分离。为了使软件的结构更加清晰，外界对于这些对象只需要知道它们共同的接口，而不清楚其具体的实现细节，使整个系统的设计更加符合单一职责原则。</li>\n<li>创建型模式在创建什么(What)，由谁创建(Who)，何时创建(When)等方面都为软件设计者提供了尽可能大的灵活性。创建型模式隐藏了类的实例的创建细节，通过隐藏对象如何被创建和组合在一起达到使整个系统独立的目的。 </li>\n</ul>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/6/16/1640641afcb7559b?w=491&amp;h=241&amp;f=png&amp;s=51443\" alt=\"创建型模式\"></p>\n<blockquote>\n<h3 id=\"创建型模式系列文章推荐：\"><a href=\"#创建型模式系列文章推荐：\" class=\"headerlink\" title=\"创建型模式系列文章推荐：\"></a>创建型模式系列文章推荐：</h3></blockquote>\n<ul>\n<li><strong>单例模式：</strong></li>\n</ul>\n<p><a href=\"https://blog.csdn.net/qq_34337272/article/details/80455972\" target=\"_blank\" rel=\"noopener\">深入理解单例模式——只有一个实例</a></p>\n<ul>\n<li><strong>工厂模式：</strong></li>\n</ul>\n<p><a href=\"https://blog.csdn.net/qq_34337272/article/details/80472071\" target=\"_blank\" rel=\"noopener\">深入理解工厂模式——由对象工厂生成对象</a></p>\n<ul>\n<li><strong>建造者模式：</strong></li>\n</ul>\n<p><a href=\"http://blog.csdn.net/qq_34337272/article/details/80540059\" target=\"_blank\" rel=\"noopener\">深入理解建造者模式 ——组装复杂的实例</a></p>\n<ul>\n<li><strong>原型模式：</strong></li>\n</ul>\n<p><a href=\"https://blog.csdn.net/qq_34337272/article/details/80706444\" target=\"_blank\" rel=\"noopener\">深入理解原型模式 ——通过复制生成实例</a></p>\n<h2 id=\"结构型模式：\"><a href=\"#结构型模式：\" class=\"headerlink\" title=\"结构型模式：\"></a>结构型模式：</h2><blockquote>\n<h3 id=\"结构型模式概述：\"><a href=\"#结构型模式概述：\" class=\"headerlink\" title=\"结构型模式概述：\"></a>结构型模式概述：</h3></blockquote>\n<ul>\n<li><strong>结构型模式(Structural Pattern)：</strong> 描述如何将类或者对象结合在一起形成更大的结构，就像搭积木，可以通过简单积木的组合形成复杂的、功能更为强大的结构<br><img src=\"https://user-gold-cdn.xitu.io/2018/6/16/164064d6b3c205e3?w=719&amp;h=233&amp;f=png&amp;s=270293\" alt=\"结构型模式(Structural Pattern)\"></li>\n<li><strong>结构型模式可以分为类结构型模式和对象结构型模式：</strong>  <ul>\n<li>类结构型模式关心类的组合，由多个类可以组合成一个更大的系统，在类结构型模式中一般只存在继承关系和实现关系。</li>\n<li>对象结构型模式关心类与对象的组合，通过关联关系使得在一个类中定义另一个类的实例对象，然后通过该对象调用其方法。根据“合成复用原则”，在系统中尽量使用关联关系来替代继承关系，因此大部分结构型模式都是对象结构型模式。</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/6/16/1640655459d766d2?w=378&amp;h=266&amp;f=png&amp;s=59652\" alt=\"结构型模式\"></p>\n<blockquote>\n<h3 id=\"结构型模式系列文章推荐：\"><a href=\"#结构型模式系列文章推荐：\" class=\"headerlink\" title=\"结构型模式系列文章推荐：\"></a>结构型模式系列文章推荐：</h3></blockquote>\n<ul>\n<li><strong>适配器模式：</strong></li>\n</ul>\n<p><a href=\"https://segmentfault.com/a/1190000011856448\" target=\"_blank\" rel=\"noopener\">深入理解适配器模式——加个“适配器”以便于复用</a></p>\n<p><a href=\"https://www.ibm.com/developerworks/cn/java/j-lo-adapter-pattern/index.html\" target=\"_blank\" rel=\"noopener\">适配器模式原理及实例介绍-IBM</a></p>\n<ul>\n<li><strong>桥接模式：</strong></li>\n</ul>\n<p><a href=\"https://blog.csdn.net/yangzl2008/article/details/7670996\" target=\"_blank\" rel=\"noopener\">设计模式笔记16：桥接模式(Bridge Pattern)</a></p>\n<ul>\n<li><strong>组合模式：</strong></li>\n</ul>\n<p><a href=\"https://blog.csdn.net/lmb55/article/details/51039781\" target=\"_blank\" rel=\"noopener\">大话设计模式—组合模式</a></p>\n<ul>\n<li><strong>装饰模式：</strong></li>\n</ul>\n<p><a href=\"https://www.cnblogs.com/chenxing818/p/4705919.html\" target=\"_blank\" rel=\"noopener\">java模式—装饰者模式</a></p>\n<p><a href=\"https://blog.csdn.net/cauchyweierstrass/article/details/48240147\" target=\"_blank\" rel=\"noopener\">Java设计模式-装饰者模式</a></p>\n<ul>\n<li><strong>外观模式：</strong></li>\n</ul>\n<p><a href=\"https://www.cnblogs.com/lthIU/p/5860607.html\" target=\"_blank\" rel=\"noopener\">java设计模式之外观模式（门面模式）</a></p>\n<ul>\n<li><strong>享元模式：</strong></li>\n</ul>\n<p><a href=\"http://www.jasongj.com/design_pattern/flyweight/\" target=\"_blank\" rel=\"noopener\">享元模式</a></p>\n<ul>\n<li><strong>代理模式：</strong></li>\n</ul>\n<p><a href=\"https://www.ibm.com/developerworks/cn/java/j-lo-proxy-pattern/index.html\" target=\"_blank\" rel=\"noopener\">代理模式原理及实例讲解 （IBM出品，很不错）</a></p>\n<p><a href=\"https://blog.csdn.net/briblue/article/details/73928350\" target=\"_blank\" rel=\"noopener\">轻松学，Java 中的代理模式及动态代理</a></p>\n<p><a href=\"https://blog.csdn.net/justloveyou_/article/details/74203025\" target=\"_blank\" rel=\"noopener\">Java代理模式及其应用</a></p>\n<h2 id=\"行为型模式\"><a href=\"#行为型模式\" class=\"headerlink\" title=\"行为型模式\"></a>行为型模式</h2><blockquote>\n<h3 id=\"行为型模式概述：\"><a href=\"#行为型模式概述：\" class=\"headerlink\" title=\"行为型模式概述：\"></a>行为型模式概述：</h3></blockquote>\n<ul>\n<li>行为型模式(Behavioral Pattern)是对在不同的对象之间划分责任和算法的抽象化。</li>\n<li>行为型模式不仅仅关注类和对象的结构，而且重点关注它们之间的相互作用。</li>\n<li>通过行为型模式，可以更加清晰地划分类与对象的职责，并研究系统在运行时实例对象之间的交互。在系统运行时，对象并不是孤立的，它们可以通过相互通信与协作完成某些复杂功能，一个对象在运行时也将影响到其他对象的运行。 </li>\n</ul>\n<p><strong>行为型模式分为类行为型模式和对象行为型模式两种：</strong></p>\n<ul>\n<li><strong>类行为型模式：</strong> 类的行为型模式使用继承关系在几个类之间分配行为，类行为型模式主要通过多态等方式来分配父类与子类的职责。</li>\n<li><strong>对象行为型模式：</strong> 对象的行为型模式则使用对象的聚合关联关系来分配行为，对象行为型模式主要是通过对象关联等方式来分配两个或多个类的职责。根据“合成复用原则”，系统中要尽量使用关联关系来取代继承关系，因此大部分行为型设计模式都属于对象行为型设计模式。</li>\n</ul>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/6/28/164467dd92c6172c?w=453&amp;h=269&amp;f=png&amp;s=63270\" alt=\"行为型模式\"></p>\n<ul>\n<li><strong>职责链模式：</strong></li>\n</ul>\n<p><a href=\"https://blog.csdn.net/jason0539/article/details/45091639\" target=\"_blank\" rel=\"noopener\">Java设计模式之责任链模式、职责链模式</a></p>\n<p><a href=\"https://www.cnblogs.com/lizo/p/7503862.html\" target=\"_blank\" rel=\"noopener\">责任链模式实现的三种方式</a></p>\n<ul>\n<li><strong>命令模式：</strong></li>\n</ul>\n<ul>\n<li><strong>解释器模式：</strong></li>\n<li><strong>迭代器模式：</strong></li>\n<li><strong>中介者模式：</strong></li>\n<li><strong>备忘录模式：</strong></li>\n<li><strong>观察者模式：</strong></li>\n<li><strong>状态模式：</strong></li>\n<li><strong>策略模式：</strong></li>\n<li><strong>模板方法模式：</strong></li>\n<li><strong>访问者模式：</strong></li>\n</ul>\n","prev":{"title":"Java垃圾回收机制","slug":"可能是把Java内存区域讲的最清楚的一篇文章"},"next":{"title":"LinkList 双端链表","slug":"LinkedList"},"link":"http://ziyaofeng.github.io/2017/12/03/设计模式/","toc":[{"title":"创建型模式：","id":"创建型模式：","index":"1","children":[{"title":"创建型模式概述：","id":"创建型模式概述：","index":"1.1"},{"title":"创建型模式系列文章推荐：","id":"创建型模式系列文章推荐：","index":"1.2"}]},{"title":"结构型模式：","id":"结构型模式：","index":"2","children":[{"title":"结构型模式概述：","id":"结构型模式概述：","index":"2.1"},{"title":"结构型模式系列文章推荐：","id":"结构型模式系列文章推荐：","index":"2.2"}]},{"title":"行为型模式","id":"行为型模式","index":"3","children":[{"title":"行为型模式概述：","id":"行为型模式概述：","index":"3.1"}]}]}