{"title":"Java垃圾回收机制","date":"2017-12-02T21:01:24.000Z","excerpt":"","slug":"可能是把Java内存区域讲的最清楚的一篇文章","tags":["java基础"],"categories":["Java相关"],"updated":"2018-09-21T01:02:47.054Z","content":"<h3 id=\"基本问题：\"><a href=\"#基本问题：\" class=\"headerlink\" title=\"基本问题：\"></a>基本问题：</h3><ul>\n<li><strong>介绍下 Java 内存区域（运行时数据区）</strong></li>\n<li><strong>Java 对象的创建过程（五步，建议能默写出来并且要知道每一步虚拟机做了什么）</strong></li>\n<li><strong>对象的访问定位的两种方式（句柄和直接指针两种方式）</strong></li>\n</ul>\n<h3 id=\"拓展问题\"><a href=\"#拓展问题\" class=\"headerlink\" title=\"拓展问题:\"></a>拓展问题:</h3><ul>\n<li><strong>String类和常量池</strong></li>\n<li><strong>8种基本类型的包装类和常量池</strong></li>\n</ul>\n<h2 id=\"1-概述\"><a href=\"#1-概述\" class=\"headerlink\" title=\"1   概述\"></a>1   概述</h2><p>对于 Java 程序员来说，在虚拟机自动内存管理机制下，不再需要像C/C++程序开发程序员这样为内一个 new 操作去写对应的 delete/free 操作，不容易出现内存泄漏和内存溢出问题。正是因为 Java 程序员把内存控制权利交给 Java 虚拟机，一旦出现内存泄漏和溢出方面的问题，如果不了解虚拟机是怎样使用内存的，那么排查错误将会是一个非常艰巨的任务。</p>\n<h2 id=\"2-运行时数据区域\"><a href=\"#2-运行时数据区域\" class=\"headerlink\" title=\"2 运行时数据区域\"></a>2 运行时数据区域</h2><p>Java 虚拟机在执行 Java 程序的过程中会把它管理的内存划分成若干个不同的数据区域。<br><img src=\"https://user-gold-cdn.xitu.io/2018/4/27/16306a34cd8a4354?w=513&amp;h=404&amp;f=png&amp;s=132068\" alt=\"运行时数据区域\"><br>这些组成部分一些事线程私有的，其他的则是线程共享的。</p>\n<p><strong>线程私有的：</strong></p>\n<ul>\n<li>程序计数器</li>\n<li>虚拟机栈</li>\n<li>本地方法栈</li>\n</ul>\n<p><strong>线程共享的：</strong></p>\n<ul>\n<li>堆</li>\n<li>方法区</li>\n<li>直接内存</li>\n</ul>\n<h3 id=\"2-1-程序计数器\"><a href=\"#2-1-程序计数器\" class=\"headerlink\" title=\"2.1 程序计数器\"></a>2.1 程序计数器</h3><p>程序计数器是一块较小的内存空间，可以看作是当前线程所执行的字节码的行号指示器。<strong>字节码解释器工作时通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等功能都需要依赖这个计数器来完。</strong></p>\n<p>另外，<strong>为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各线程之间计数器互不影响，独立存储，我们称这类内存区域为“线程私有”的内存。</strong></p>\n<p><strong>从上面的介绍中我们知道程序计数器主要有两个作用：</strong></p>\n<ol>\n<li>字节码解释器通过改变程序计数器来依次读取指令，从而实现代码的流程控制，如：顺序执行、选择、循环、异常处理。</li>\n<li>在多线程的情况下，程序计数器用于记录当前线程执行的位置，从而当线程被切换回来的时候能够知道该线程上次运行到哪儿了。</li>\n</ol>\n<p><strong>注意：程序计数器是唯一一个不会出现OutOfMemoryError的内存区域，它的生命周期随着线程的创建而创建，随着线程的结束而死亡。</strong></p>\n<h3 id=\"2-2-Java-虚拟机栈\"><a href=\"#2-2-Java-虚拟机栈\" class=\"headerlink\" title=\"2.2 Java 虚拟机栈\"></a>2.2 Java 虚拟机栈</h3><p><strong>与程序计数器一样，Java虚拟机栈也是线程私有的，它的生命周期和线程相同，描述的是 Java 方法执行的内存模型。</strong></p>\n<p><strong>Java 内存可以粗糙的区分为堆内存（Heap）和栈内存(Stack),其中栈就是现在说的虚拟机栈，或者说是虚拟机栈中局部变量表部分。</strong> （实际上，Java虚拟机栈是由一个个栈帧组成，而每个栈帧中都拥有：局部变量表、操作数栈、动态链接、方法出口信息。）</p>\n<p><strong>局部变量表主要存放了编译器可知的各种数据类型</strong>（boolean、byte、char、short、int、float、long、double）、<strong>对象引用</strong>（reference类型，它不同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或其他与此对象相关的位置）。</p>\n<p><strong>Java 虚拟机栈会出现两种异常：StackOverFlowError 和 OutOfMemoryError。</strong></p>\n<ul>\n<li><strong>StackOverFlowError：</strong> 若Java虚拟机栈的内存大小不允许动态扩展，那么当线程请求栈的深度超过当前Java虚拟机栈的最大深度的时候，就抛出StackOverFlowError异常。</li>\n<li><strong>OutOfMemoryError：</strong> 若 Java 虚拟机栈的内存大小允许动态扩展，且当线程请求栈时内存用完了，无法再动态扩展了，此时抛出OutOfMemoryError异常。</li>\n</ul>\n<p>Java 虚拟机栈也是线程私有的，每个线程都有各自的Java虚拟机栈，而且随着线程的创建而创建，随着线程的死亡而死亡。</p>\n<h3 id=\"2-3-本地方法栈\"><a href=\"#2-3-本地方法栈\" class=\"headerlink\" title=\"2.3 本地方法栈\"></a>2.3 本地方法栈</h3><p>和虚拟机栈所发挥的作用非常相似，区别是： <strong>虚拟机栈为虚拟机执行 Java 方法 （也就是字节码）服务，而本地方法栈则为虚拟机使用到的 Native 方法服务。</strong> 在 HotSpot 虚拟机中和 Java 虚拟机栈合二为一。</p>\n<p>本地方法被执行的时候，在本地方法栈也会创建一个栈帧，用于存放该本地方法的局部变量表、操作数栈、动态链接、出口信息。</p>\n<p>方法执行完毕后相应的栈帧也会出栈并释放内存空间，也会出现 StackOverFlowError 和 OutOfMemoryError 两种异常。</p>\n<h3 id=\"2-4-堆\"><a href=\"#2-4-堆\" class=\"headerlink\" title=\"2.4 堆\"></a>2.4 堆</h3><p>Java 虚拟机所管理的内存中最大的一块，Java 堆是所有线程共享的一块内存区域，在虚拟机启动时创建。<strong>此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例以及数组都在这里分配内存。</strong></p>\n<p>Java 堆是垃圾收集器管理的主要区域，因此也被称作<strong>GC堆（Garbage Collected Heap）</strong>.从垃圾回收的角度，由于现在收集器基本都采用分代垃圾收集算法，所以Java堆还可以细分为：新生代和老年代：在细致一点有：Eden空间、From Survivor、To Survivor空间等。<strong>进一步划分的目的是更好地回收内存，或者更快地分配内存。</strong></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/8/25/16570344a29c3433?w=599&amp;h=250&amp;f=png&amp;s=8946\" alt=\"\"></p>\n<p><strong>在 JDK 1.8中移除整个永久代，取而代之的是一个叫元空间（Metaspace）的区域（永久代使用的是JVM的堆内存空间，而元空间使用的是物理内存，直接受到本机的物理内存限制）。</strong></p>\n<p>推荐阅读：</p>\n<ul>\n<li>《Java8内存模型—永久代(PermGen)和元空间(Metaspace)》：<a href=\"http://www.cnblogs.com/paddix/p/5309550.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/paddix/p/5309550.html</a></li>\n</ul>\n<h3 id=\"2-5-方法区\"><a href=\"#2-5-方法区\" class=\"headerlink\" title=\"2.5 方法区\"></a>2.5 方法区</h3><p><strong>方法区与 Java 堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。虽然Java虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做 Non-Heap（非堆），目的应该是与 Java 堆区分开来。</strong></p>\n<p>HotSpot 虚拟机中方法区也常被称为 <strong>“永久代”</strong>，本质上两者并不等价。仅仅是因为 HotSpot 虚拟机设计团队用永久代来实现方法区而已，这样 HotSpot 虚拟机的垃圾收集器就可以像管理 Java 堆一样管理这部分内存了。但是这并不是一个好主意，因为这样更容易遇到内存溢出问题。</p>\n<p><strong>相对而言，垃圾收集行为在这个区域是比较少出现的，但并非数据进入方法区后就“永久存在”了。</strong></p>\n<h3 id=\"2-6-运行时常量池\"><a href=\"#2-6-运行时常量池\" class=\"headerlink\" title=\"2.6 运行时常量池\"></a>2.6 运行时常量池</h3><p>运行时常量池是方法区的一部分。Class 文件中除了有类的版本、字段、方法、接口等描述信息外，还有常量池信息（用于存放编译期生成的各种字面量和符号引用）</p>\n<p>既然运行时常量池时方法区的一部分，自然受到方法区内存的限制，当常量池无法再申请到内存时会抛出 OutOfMemoryError 异常。</p>\n<p><strong>JDK1.7及之后版本的 JVM 已经将运行时常量池从方法区中移了出来，在 Java 堆（Heap）中开辟了一块区域存放运行时常量池。</strong> </p>\n<p><img src=\"http://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-9-14/26038433.jpg\" alt=\"\"><br>——图片来源：<a href=\"https://blog.csdn.net/wangbiao007/article/details/78545189\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/wangbiao007/article/details/78545189</a></p>\n<p>推荐阅读：</p>\n<ul>\n<li>《Java 中几种常量池的区分》： <a href=\"https://blog.csdn.net/qq_26222859/article/details/73135660\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_26222859/article/details/73135660</a></li>\n</ul>\n<h3 id=\"2-7-直接内存\"><a href=\"#2-7-直接内存\" class=\"headerlink\" title=\"2.7 直接内存\"></a>2.7 直接内存</h3><p>直接内存并不是虚拟机运行时数据区的一部分，也不是虚拟机规范中定义的内存区域，但是这部分内存也被频繁地使用。而且也可能导致OutOfMemoryError异常出现。</p>\n<p>JDK1.4中新加入的 <strong>NIO(New Input/Output) 类</strong>，引入了一种基于<strong>通道（Channel）</strong> 与<strong>缓存区（Buffer）</strong> 的 I/O 方式，它可以直接使用Native函数库直接分配堆外内存，然后通过一个存储在 Java 堆中的 DirectByteBuffer 对象作为这块内存的引用进行操作。这样就能在一些场景中显著提高性能，因为<strong>避免了在 Java 堆和 Native 堆之间来回复制数据</strong>。</p>\n<p>本机直接内存的分配不会收到 Java 堆的限制，但是，既然是内存就会受到本机总内存大小以及处理器寻址空间的限制。</p>\n<h2 id=\"3-HotSpot-虚拟机对象探秘\"><a href=\"#3-HotSpot-虚拟机对象探秘\" class=\"headerlink\" title=\"3 HotSpot 虚拟机对象探秘\"></a>3 HotSpot 虚拟机对象探秘</h2><p>通过上面的介绍我们大概知道了虚拟机的内存情况，下面我们来详细的了解一下 HotSpot 虚拟机在 Java 堆中对象分配、布局和访问的全过程。</p>\n<h3 id=\"3-1-对象的创建\"><a href=\"#3-1-对象的创建\" class=\"headerlink\" title=\"3.1 对象的创建\"></a>3.1 对象的创建</h3><p>下图便是 Java 对象的创建过程，我建议最好是能默写出来，并且要掌握每一步在做什么。<br><img src=\"https://user-gold-cdn.xitu.io/2018/8/22/16561e59a4135869?w=950&amp;h=279&amp;f=png&amp;s=28529\" alt=\"Java对象的创建过程\"></p>\n<p><strong>①类加载检查：</strong> 虚拟机遇到一条 new 指令时，首先将去检查这个指令的参数是否能在常量池中定位到这个类的符号引用，并且检查这个符号引用代表的类是否已被加载过、解析和初始化过。如果没有，那必须先执行相应的类加载过程。</p>\n<p><strong>②分配内存：</strong> 在<strong>类加载检查</strong>通过后，接下来虚拟机将为新生对象<strong>分配内存</strong>。对象所需的内存大小在类加载完成后便可确定，为对象分配空间的任务等同于把一块确定大小的内存从 Java 堆中划分出来。<strong>分配方式</strong>有 <strong>“指针碰撞”</strong> 和 <strong>“空闲列表”</strong> 两种，<strong>选择那种分配方式由 Java 堆是否规整决定，而Java堆是否规整又由所采用的垃圾收集器是否带有压缩整理功能决定</strong>。</p>\n<p><strong>内存分配的两种方式：（补充内容，需要掌握）</strong></p>\n<p>选择以上两种方式中的哪一种，取决于 Java 堆内存是否规整。而 Java 堆内存是否规整，取决于 GC 收集器的算法是”标记-清除”，还是”标记-整理”（也称作”标记-压缩”），值得注意的是，复制算法内存也是规整的</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/8/22/16561e59a40a2c3d?w=1426&amp;h=333&amp;f=png&amp;s=26346\" alt=\"\"></p>\n<p><strong>内存分配并发问题（补充内容，需要掌握）</strong></p>\n<p>在创建对象的时候有一个很重要的问题，就是线程安全，因为在实际开发过程中，创建对象是很频繁的事情，作为虚拟机来说，必须要保证线程是安全的，通常来讲，虚拟机采用两种方式来保证线程安全：</p>\n<ul>\n<li><strong>CAS+失败重试：</strong> CAS 是乐观锁的一种实现方式。所谓乐观锁就是，每次不加锁而是假设没有冲突而去完成某项操作，如果因为冲突失败就重试，直到成功为止。<strong>虚拟机采用 CAS 配上失败重试的方式保证更新操作的原子性。</strong></li>\n<li><strong>TLAB：</strong> 为每一个线程预先在Eden区分配一块儿内存，JVM在给线程中的对象分配内存时，首先在TLAB分配，当对象大于TLAB中的剩余内存或TLAB的内存已用尽时，再采用上述的CAS进行内存分配</li>\n</ul>\n<p><strong>③初始化零值：</strong> 内存分配完成后，虚拟机需要将分配到的内存空间都初始化为零值（不包括对象头），这一步操作保证了对象的实例字段在 Java 代码中可以不赋初始值就直接使用，程序能访问到这些字段的数据类型所对应的零值。</p>\n<p><strong>④设置对象头：</strong> 初始化零值完成之后，<strong>虚拟机要对对象进行必要的设置</strong>，例如这个对象是那个类的实例、如何才能找到类的元数据信息、对象的哈希吗、对象的 GC 分代年龄等信息。 <strong>这些信息存放在对象头中。</strong> 另外，根据虚拟机当前运行状态的不同，如是否启用偏向锁等，对象头会有不同的设置方式。</p>\n<p><strong>⑤执行 init 方法：</strong> 在上面工作都完成之后，从虚拟机的视角来看，一个新的对象已经产生了，但从 Java 程序的视角来看，对象创建才刚开始，<code>&lt;init&gt;</code> 方法还没有执行，所有的字段都还为零。所以一般来说，执行 new 指令之后会接着执行 <code>&lt;init&gt;</code> 方法，把对象按照程序员的意愿进行初始化，这样一个真正可用的对象才算完全产生出来。</p>\n<h3 id=\"3-2-对象的内存布局\"><a href=\"#3-2-对象的内存布局\" class=\"headerlink\" title=\"3.2 对象的内存布局\"></a>3.2 对象的内存布局</h3><p>在 Hotspot 虚拟机中，对象在内存中的布局可以分为3快区域：<strong>对象头</strong>、<strong>实例数据</strong>和<strong>对齐填充</strong>。</p>\n<p><strong>Hotspot虚拟机的对象头包括两部分信息</strong>，<strong>第一部分用于存储对象自身的自身运行时数据</strong>（哈希吗、GC分代年龄、锁状态标志等等），<strong>另一部分是类型指针</strong>，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是那个类的实例。</p>\n<p><strong>实例数据部分是对象真正存储的有效信息</strong>，也是在程序中所定义的各种类型的字段内容。</p>\n<p><strong>对齐填充部分不是必然存在的，也没有什么特别的含义，仅仅起占位作用。</strong> 因为Hotspot虚拟机的自动内存管理系统要求对象起始地址必须是8字节的整数倍，换句话说就是对象的大小必须是8字节的整数倍。而对象头部分正好是8字节的倍数（1倍或2倍），因此，当对象实例数据部分没有对齐时，就需要通过对齐填充来补全。</p>\n<h3 id=\"3-3-对象的访问定位\"><a href=\"#3-3-对象的访问定位\" class=\"headerlink\" title=\"3.3 对象的访问定位\"></a>3.3 对象的访问定位</h3><p>建立对象就是为了使用对象，我们的Java程序通过栈上的 reference 数据来操作堆上的具体对象。对象的访问方式有虚拟机实现而定，目前主流的访问方式有<strong>①使用句柄</strong>和<strong>②直接指针</strong>两种：</p>\n<ol>\n<li><p><strong>句柄：</strong> 如果使用句柄的话，那么Java堆中将会划分出一块内存来作为句柄池，reference 中存储的就是对象的句柄地址，而句柄中包含了对象实例数据与类型数据各自的具体地址信息；<br><img src=\"https://user-gold-cdn.xitu.io/2018/4/27/16306b9573968946?w=786&amp;h=362&amp;f=png&amp;s=109201\" alt=\"使用句柄\"></p>\n</li>\n<li><p><strong>直接指针：</strong>  如果使用直接指针访问，那么 Java 堆对像的布局中就必须考虑如何放置访问类型数据的相关信息，而reference 中存储的直接就是对象的地址。</p>\n</li>\n</ol>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/4/27/16306ba3a41b6b65?w=766&amp;h=353&amp;f=png&amp;s=99172\" alt=\"使用直接指针\"></p>\n<p><strong>这两种对象访问方式各有优势。使用句柄来访问的最大好处是 reference 中存储的是稳定的句柄地址，在对象被移动时只会改变句柄中的实例数据指针，而 reference 本身不需要修改。使用直接指针访问方式最大的好处就是速度快，它节省了一次指针定位的时间开销。</strong></p>\n<h2 id=\"四-重点补充内容\"><a href=\"#四-重点补充内容\" class=\"headerlink\" title=\"四  重点补充内容\"></a>四  重点补充内容</h2><h3 id=\"String-类和常量池\"><a href=\"#String-类和常量池\" class=\"headerlink\" title=\"String 类和常量池\"></a>String 类和常量池</h3><p><strong>1 String 对象的两种创建方式：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String str1 = <span class=\"string\">\"abcd\"</span>;</span><br><span class=\"line\">String str2 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"abcd\"</span>);</span><br><span class=\"line\">System.out.println(str1==str2);<span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n<p>这两种不同的创建方法是有差别的，第一种方式是在常量池中拿对象，第二种方式是直接在堆内存空间创建一个新的对象。<br><img src=\"https://user-gold-cdn.xitu.io/2018/8/22/16561e59a59c0873?w=698&amp;h=355&amp;f=png&amp;s=10449\" alt=\"\"><br>记住：只要使用new方法，便需要创建新的对象。</p>\n<p><strong>2 String 类型的常量池比较特殊。它的主要使用方法有两种：</strong></p>\n<ul>\n<li>直接使用双引号声明出来的 String 对象会直接存储在常量池中。</li>\n<li>如果不是用双引号声明的 String 对象，可以使用 String 提供的 intern 方String.intern() 是一个 Native 方法，它的作用是：如果运行时常量池中已经包含一个等于此 String 对象内容的字符串，则返回常量池中该字符串的引用；如果没有，则在常量池中创建与此 String 内容相同的字符串，并返回常量池中创建的字符串的引用。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s1 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"计算机\"</span>);</span><br><span class=\"line\">String s2 = s1.intern();</span><br><span class=\"line\">String s3 = <span class=\"string\">\"计算机\"</span>;</span><br><span class=\"line\">System.out.println(s2);<span class=\"comment\">//计算机</span></span><br><span class=\"line\">System.out.println(s1 == s2);<span class=\"comment\">//false，因为一个是堆内存中的String对象一个是常量池中的String对象，</span></span><br><span class=\"line\">System.out.println(s3 == s2);<span class=\"comment\">//true，因为两个都是常量池中的String对</span></span><br></pre></td></tr></table></figure>\n<p><strong>3 String 字符串拼接</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String str1 = <span class=\"string\">\"str\"</span>;</span><br><span class=\"line\">String str2 = <span class=\"string\">\"ing\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">String str3 = <span class=\"string\">\"str\"</span> + <span class=\"string\">\"ing\"</span>;<span class=\"comment\">//常量池中的对象</span></span><br><span class=\"line\">String str4 = str1 + str2; <span class=\"comment\">//在堆上创建的新的对象\t  </span></span><br><span class=\"line\">String str5 = <span class=\"string\">\"string\"</span>;<span class=\"comment\">//常量池中的对象</span></span><br><span class=\"line\">System.out.println(str3 == str4);<span class=\"comment\">//false</span></span><br><span class=\"line\">System.out.println(str3 == str5);<span class=\"comment\">//true</span></span><br><span class=\"line\">System.out.println(str4 == str5);<span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/8/22/16561e59a4d13f92?w=593&amp;h=603&amp;f=png&amp;s=22265\" alt=\"\"></p>\n<p>尽量避免多个字符串拼接，因为这样会重新创建对象。如果需要改变字符串的话，可以使用 StringBuilder 或者 StringBuffer。</p>\n<h3 id=\"String-s1-new-String-“abc”-这句话创建了几个对象？\"><a href=\"#String-s1-new-String-“abc”-这句话创建了几个对象？\" class=\"headerlink\" title=\"String s1 = new String(“abc”);这句话创建了几个对象？\"></a>String s1 = new String(“abc”);这句话创建了几个对象？</h3><p><strong>创建了两个对象。</strong></p>\n<p><strong>验证：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s1 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"abc\"</span>);<span class=\"comment\">// 堆内存的地值值</span></span><br><span class=\"line\">String s2 = <span class=\"string\">\"abc\"</span>;</span><br><span class=\"line\">System.out.println(s1 == s2);<span class=\"comment\">// 输出false,因为一个是堆内存，一个是常量池的内存，故两者是不同的。</span></span><br><span class=\"line\">System.out.println(s1.equals(s2));<span class=\"comment\">// 输出true</span></span><br></pre></td></tr></table></figure>\n<p><strong>结果：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">false</span><br><span class=\"line\">true</span><br></pre></td></tr></table></figure>\n<p><strong>解释：</strong></p>\n<p>先有字符串”abc”放入常量池，然后 new 了一份字符串”abc”放入Java堆(字符串常量”abc”在编译期就已经确定放入常量池，而 Java 堆上的”abc”是在运行期初始化阶段才确定)，然后 Java 栈的 str1 指向Java堆上的”abc”。 </p>\n<h3 id=\"8种基本类型的包装类和常量池\"><a href=\"#8种基本类型的包装类和常量池\" class=\"headerlink\" title=\"8种基本类型的包装类和常量池\"></a>8种基本类型的包装类和常量池</h3><ul>\n<li><strong>Java 基本类型的包装类的大部分都实现了常量池技术，即Byte,Short,Integer,Long,Character,Boolean；这5种包装类默认创建了数值[-128，127]的相应类型的缓存数据，但是超出此范围仍然会去创建新的对象。</strong></li>\n<li><strong>两种浮点数类型的包装类 Float,Double 并没有实现常量池技术。</strong></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Integer i1 = <span class=\"number\">33</span>;</span><br><span class=\"line\">Integer i2 = <span class=\"number\">33</span>;</span><br><span class=\"line\">System.out.println(i1 == i2);<span class=\"comment\">// 输出true</span></span><br><span class=\"line\">Integer i11 = <span class=\"number\">333</span>;</span><br><span class=\"line\">Integer i22 = <span class=\"number\">333</span>;</span><br><span class=\"line\">System.out.println(i11 == i22);<span class=\"comment\">// 输出false</span></span><br><span class=\"line\">Double i3 = <span class=\"number\">1.2</span>;</span><br><span class=\"line\">Double i4 = <span class=\"number\">1.2</span>;</span><br><span class=\"line\">System.out.println(i3 == i4);<span class=\"comment\">// 输出false</span></span><br></pre></td></tr></table></figure>\n<p><strong>Integer 缓存源代码：</strong> </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*此方法将始终缓存-128到127（包括端点）范围内的值，并可以缓存此范围之外的其他值。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Integer <span class=\"title\">valueOf</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Integer(i);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>应用场景：</strong></p>\n<ol>\n<li>Integer i1=40；Java 在编译的时候会直接将代码封装成Integer i1=Integer.valueOf(40);，从而使用常量池中的对象。</li>\n<li>Integer i1 = new Integer(40);这种情况下会创建新的对象。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Integer i1 = <span class=\"number\">40</span>;</span><br><span class=\"line\">Integer i2 = <span class=\"keyword\">new</span> Integer(<span class=\"number\">40</span>);</span><br><span class=\"line\">System.out.println(i1==i2);<span class=\"comment\">//输出false</span></span><br></pre></td></tr></table></figure>\n<p><strong>Integer比较更丰富的一个例子:</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Integer i1 = <span class=\"number\">40</span>;</span><br><span class=\"line\">Integer i2 = <span class=\"number\">40</span>;</span><br><span class=\"line\">Integer i3 = <span class=\"number\">0</span>;</span><br><span class=\"line\">Integer i4 = <span class=\"keyword\">new</span> Integer(<span class=\"number\">40</span>);</span><br><span class=\"line\">Integer i5 = <span class=\"keyword\">new</span> Integer(<span class=\"number\">40</span>);</span><br><span class=\"line\">Integer i6 = <span class=\"keyword\">new</span> Integer(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(<span class=\"string\">\"i1=i2   \"</span> + (i1 == i2));</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"i1=i2+i3   \"</span> + (i1 == i2 + i3));</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"i1=i4   \"</span> + (i1 == i4));</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"i4=i5   \"</span> + (i4 == i5));</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"i4=i5+i6   \"</span> + (i4 == i5 + i6));   </span><br><span class=\"line\">System.out.println(<span class=\"string\">\"40=i5+i6   \"</span> + (<span class=\"number\">40</span> == i5 + i6));</span><br></pre></td></tr></table></figure>\n<p>结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i1=i2   true</span><br><span class=\"line\">i1=i2+i3   true</span><br><span class=\"line\">i1=i4   false</span><br><span class=\"line\">i4=i5   false</span><br><span class=\"line\">i4=i5+i6   true</span><br><span class=\"line\">40=i5+i6   true</span><br></pre></td></tr></table></figure>\n<p>解释：</p>\n<p>语句i4 == i5 + i6，因为+这个操作符不适用于Integer对象，首先i5和i6进行自动拆箱操作，进行数值相加，即i4 == 40。然后Integer对象无法与数值进行直接比较，所以i4自动拆箱转为int值40，最终这条语句转为40 == 40进行数值比较。</p>\n<p><strong>参考：</strong></p>\n<ul>\n<li>《深入理解Java虚拟机：JVM高级特性与最佳实践（第二版》</li>\n<li>《实战java虚拟机》</li>\n<li><a href=\"https://www.cnblogs.com/CZDblog/p/5589379.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/CZDblog/p/5589379.html</a></li>\n<li><a href=\"https://www.cnblogs.com/java-zhao/p/5180492.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/java-zhao/p/5180492.html</a></li>\n<li><a href=\"https://blog.csdn.net/qq_26222859/article/details/73135660\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_26222859/article/details/73135660</a></li>\n<li><a href=\"https://blog.csdn.net/cugwuhan2014/article/details/78038254\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/cugwuhan2014/article/details/78038254</a></li>\n</ul>\n","prev":{"title":"多线程","slug":"多线程系列"},"next":{"title":"设计模式","slug":"设计模式"},"link":"http://ziyaofeng.github.io/2017/12/03/可能是把Java内存区域讲的最清楚的一篇文章/","toc":[{"title":"1   概述","id":"1-概述","index":"1"},{"title":"2 运行时数据区域","id":"2-运行时数据区域","index":"2","children":[{"title":"2.1 程序计数器","id":"2-1-程序计数器","index":"2.1"},{"title":"2.2 Java 虚拟机栈","id":"2-2-Java-虚拟机栈","index":"2.2"},{"title":"2.3 本地方法栈","id":"2-3-本地方法栈","index":"2.3"},{"title":"2.4 堆","id":"2-4-堆","index":"2.4"},{"title":"2.5 方法区","id":"2-5-方法区","index":"2.5"},{"title":"2.6 运行时常量池","id":"2-6-运行时常量池","index":"2.6"},{"title":"2.7 直接内存","id":"2-7-直接内存","index":"2.7"}]},{"title":"3 HotSpot 虚拟机对象探秘","id":"3-HotSpot-虚拟机对象探秘","index":"3","children":[{"title":"3.1 对象的创建","id":"3-1-对象的创建","index":"3.1"},{"title":"3.2 对象的内存布局","id":"3-2-对象的内存布局","index":"3.2"},{"title":"3.3 对象的访问定位","id":"3-3-对象的访问定位","index":"3.3"}]},{"title":"四  重点补充内容","id":"四-重点补充内容","index":"4","children":[{"title":"String 类和常量池","id":"String-类和常量池","index":"4.1"},{"title":"String s1 = new String(“abc”);这句话创建了几个对象？","id":"String-s1-new-String-“abc”-这句话创建了几个对象？","index":"4.2"},{"title":"8种基本类型的包装类和常量池","id":"8种基本类型的包装类和常量池","index":"4.3"}]}]}