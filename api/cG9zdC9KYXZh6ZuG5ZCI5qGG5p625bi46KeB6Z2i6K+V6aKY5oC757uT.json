{"title":"","date":"2018-09-21T01:04:07.272Z","excerpt":"","slug":"Java集合框架常见面试题总结","updated":"2018-09-20T07:31:28.000Z","content":"<!-- MarkdownTOC -->\n<ol>\n<li><a href=\"#list，setmap三者的区别及总结\">List，Set,Map三者的区别及总结</a></li>\n<li><a href=\"#arraylist-与-linkedlist-区别\">Arraylist 与 LinkedList 区别</a></li>\n<li><a href=\"#arraylist-与-vector-区别\">ArrayList 与 Vector 区别（为什么要用Arraylist取代Vector呢？）</a></li>\n<li><a href=\"#hashmap-和-hashtable-的区别\">HashMap 和 Hashtable 的区别</a></li>\n<li><a href=\"#hashset-和-hashmap-区别\">HashSet 和 HashMap 区别</a></li>\n<li><a href=\"#hashmap-和-concurrenthashmap-的区别\">HashMap 和 ConcurrentHashMap 的区别</a></li>\n<li><a href=\"#hashset如何检查重复\">HashSet如何检查重复</a></li>\n<li><a href=\"#comparable-和-comparator的区别\">comparable 和 comparator的区别</a><ol>\n<li><a href=\"#comparator定制排序\">Comparator定制排序</a></li>\n<li><a href=\"#重写compareto方法实现按年龄来排序\">重写compareTo方法实现按年龄来排序</a></li>\n</ol>\n</li>\n<li><a href=\"#如何对object的list排序\">如何对Object的list排序？</a></li>\n<li><a href=\"#如何实现数组与list的相互转换\">如何实现数组与List的相互转换？</a></li>\n<li><a href=\"#如何求arraylist集合的交集-并集-差集-去重复并集\">如何求ArrayList集合的交集 并集 差集 去重复并集</a></li>\n<li><a href=\"#hashmap-的工作原理及代码实现\">HashMap 的工作原理及代码实现</a></li>\n<li><a href=\"#concurrenthashmap-的工作原理及代码实现\">ConcurrentHashMap 的工作原理及代码实现</a></li>\n<li><a href=\"#集合框架底层数据结构总结\">集合框架底层数据结构总结</a><ol>\n<li><a href=\"#--collection\">- Collection</a><ol>\n<li><a href=\"#1-list\">1. List</a></li>\n<li><a href=\"#2-set\">2. Set</a></li>\n</ol>\n</li>\n<li><a href=\"#--map\">- Map</a></li>\n</ol>\n</li>\n<li><a href=\"#集合的选用\">集合的选用</a></li>\n<li><a href=\"#集合的常用方法\">集合的常用方法</a></li>\n</ol>\n<!-- /MarkdownTOC -->\n<h2 id=\"List，Set-Map三者的区别及总结\"><a href=\"#List，Set-Map三者的区别及总结\" class=\"headerlink\" title=\"List，Set,Map三者的区别及总结\"></a><font face=\"楷体\">List，Set,Map三者的区别及总结</font></h2><ul>\n<li><p><strong>List：对付顺序的好帮手</strong></p>\n<p>List接口存储一组不唯一（可以有多个元素引用相同的对象），有序的对象</p>\n</li>\n<li><p><strong>Set:注重独一无二的性质</strong></p>\n<p>不允许重复的集合。不会有多个元素引用相同的对象。</p>\n</li>\n<li><p><strong>Map:用Key来搜索的专家</strong></p>\n<p>使用键值对存储。Map会维护与Key有关联的值。两个Key可以引用相同的对象，但Key不能重复，典型的Key是String类型，但也可以是任何对象。</p>\n</li>\n</ul>\n<h2 id=\"Arraylist-与-LinkedList-区别\"><a href=\"#Arraylist-与-LinkedList-区别\" class=\"headerlink\" title=\"Arraylist 与 LinkedList 区别\"></a><font face=\"楷体\">Arraylist 与 LinkedList 区别</font></h2><p>Arraylist底层使用的是数组（存读数据效率高，插入删除特定位置效率低），LinkedList底层使用的是双向循环链表数据结构（插入，删除效率特别高）。学过数据结构这门课后我们就知道采用链表存储，插入，删除元素时间复杂度不受元素位置的影响，都是近似O（1）而数组为近似O（n），因此当数据特别多，而且经常需要插入删除元素时建议选用LinkedList.一般程序只用Arraylist就够用了，因为一般数据量都不会蛮大，Arraylist是使用最多的集合类。</p>\n<h2 id=\"ArrayList-与-Vector-区别\"><a href=\"#ArrayList-与-Vector-区别\" class=\"headerlink\" title=\"ArrayList 与 Vector 区别\"></a><font face=\"楷体\">ArrayList 与 Vector 区别</font></h2><p>Vector类的所有方法都是同步的。可以由两个线程安全地访问一个Vector对象、但是一个线程访问Vector<br>，代码要在同步操作上耗费大量的时间。Arraylist不是同步的，所以在不需要同步时建议使用Arraylist。</p>\n<h2 id=\"HashMap-和-Hashtable-的区别\"><a href=\"#HashMap-和-Hashtable-的区别\" class=\"headerlink\" title=\"HashMap 和 Hashtable 的区别\"></a><font face=\"楷体\">HashMap 和 Hashtable 的区别</font></h2><ol>\n<li><p>HashMap是非线程安全的，HashTable是线程安全的；HashTable内部的方法基本都经过synchronized修饰。</p>\n</li>\n<li><p>因为线程安全的问题，HashMap要比HashTable效率高一点，HashTable基本被淘汰。</p>\n</li>\n<li>HashMap允许有null值的存在，而在HashTable中put进的键值只要有一个null，直接抛出NullPointerException。</li>\n</ol>\n<p>Hashtable和HashMap有几个主要的不同：线程安全以及速度。仅在你需要完全的线程安全的时候使用Hashtable，而如果你使用Java5或以上的话，请使用ConcurrentHashMap吧</p>\n<h2 id=\"HashSet-和-HashMap-区别\"><a href=\"#HashSet-和-HashMap-区别\" class=\"headerlink\" title=\"HashSet 和 HashMap 区别\"></a><font face=\"楷体\">HashSet 和 HashMap 区别</font></h2><p><img src=\"https://user-gold-cdn.xitu.io/2018/3/2/161e717d734f3b23?w=896&amp;h=363&amp;f=jpeg&amp;s=205536\" alt=\"HashSet 和 HashMap 区别\"></p>\n<h2 id=\"HashMap-和-ConcurrentHashMap-的区别\"><a href=\"#HashMap-和-ConcurrentHashMap-的区别\" class=\"headerlink\" title=\"HashMap 和 ConcurrentHashMap 的区别\"></a><font face=\"楷体\">HashMap 和 ConcurrentHashMap 的区别</font></h2><p><a href=\"https://blog.csdn.net/xuefeng0707/article/details/40834595\" target=\"_blank\" rel=\"noopener\">HashMap与ConcurrentHashMap的区别</a></p>\n<ol>\n<li>ConcurrentHashMap对整个桶数组进行了分割分段(Segment)，然后在每一个分段上都用lock锁进行保护，相对于HashTable的synchronized锁的粒度更精细了一些，并发性能更好，而HashMap没有锁机制，不是线程安全的。（JDK1.8之后ConcurrentHashMap启用了一种全新的方式实现,利用CAS算法。）</li>\n<li>HashMap的键值对允许有null，但是ConCurrentHashMap都不允许。</li>\n</ol>\n<h2 id=\"HashSet如何检查重复\"><a href=\"#HashSet如何检查重复\" class=\"headerlink\" title=\"HashSet如何检查重复\"></a><font face=\"楷体\">HashSet如何检查重复</font></h2><p>当你把对象加入HashSet时，HashSet会先计算对象的hashcode值来判断对象加入的位置，同时也会与其他加入的对象的hashcode值作比较，如果没有相符的hashcode，HashSet会假设对象没有重复出现。但是如果发现有相同hashcode值的对象，这时会调用equals（）方法来检查hashcode相等的对象是否真的相同。如果两者相同，HashSet就不会让加入操作成功。（摘自我的Java启蒙书《Head fist java》第二版）</p>\n<p><strong>hashCode（）与equals（）的相关规定：</strong></p>\n<ol>\n<li>如果两个对象相等，则hashcode一定也是相同的</li>\n<li>两个对象相等,对两个equals方法返回true</li>\n<li>两个对象有相同的hashcode值，它们也不一定是相等的</li>\n<li>综上，equals方法被覆盖过，则hashCode方法也必须被覆盖</li>\n<li>hashCode()的默认行为是对堆上的对象产生独特值。如果没有重写hashCode()，则该class的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）。</li>\n</ol>\n<p><strong>==与equals的区别</strong></p>\n<ol>\n<li>==是判断两个变量或实例是不是指向同一个内存空间    equals是判断两个变量或实例所指向的内存空间的值是不是相同</li>\n<li>==是指对内存地址进行比较    equals()是对字符串的内容进行比较3.==指引用是否相同    equals()指的是值是否相同</li>\n</ol>\n<h2 id=\"comparable-和-comparator的区别\"><a href=\"#comparable-和-comparator的区别\" class=\"headerlink\" title=\"comparable 和 comparator的区别\"></a><font face=\"楷体\">comparable 和 comparator的区别</font></h2><ul>\n<li>comparable接口实际上是出自java.lang包 它有一个 compareTo(Object obj)方法用来排序</li>\n<li>comparator接口实际上是出自 java.util 包它有一个compare(Object obj1, Object obj2)方法用来排序</li>\n</ul>\n<p>一般我们需要对一个集合使用自定义排序时，我们就要重写compareTo方法或compare方法，当我们需要对某一个集合实现两种排序方式，比如一个song对象中的歌名和歌手名分别采用一种排序方法的话，我们可以重写compareTo方法和使用自制的Comparator方法或者以两个Comparator来实现歌名排序和歌星名排序，第二种代表我们只能使用两个参数版的Collections.sort().</p>\n<h3 id=\"Comparator定制排序\"><a href=\"#Comparator定制排序\" class=\"headerlink\" title=\"Comparator定制排序\"></a><font face=\"楷体\">Comparator定制排序<font face=\"楷体\"></font></font></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Comparator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * TODO Collections类方法测试之排序</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 寇爽</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2017年11月20日</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@version</span> 1.8</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CollectionsSort</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tArrayList&lt;Integer&gt; arrayList = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">\t\tarrayList.add(-<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tarrayList.add(<span class=\"number\">3</span>);</span><br><span class=\"line\">\t\tarrayList.add(<span class=\"number\">3</span>);</span><br><span class=\"line\">\t\tarrayList.add(-<span class=\"number\">5</span>);</span><br><span class=\"line\">\t\tarrayList.add(<span class=\"number\">7</span>);</span><br><span class=\"line\">\t\tarrayList.add(<span class=\"number\">4</span>);</span><br><span class=\"line\">\t\tarrayList.add(-<span class=\"number\">9</span>);</span><br><span class=\"line\">\t\tarrayList.add(-<span class=\"number\">7</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"原始数组:\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(arrayList);</span><br><span class=\"line\">\t\t<span class=\"comment\">// void reverse(List list)：反转</span></span><br><span class=\"line\">\t\tCollections.reverse(arrayList);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Collections.reverse(arrayList):\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(arrayList);</span><br><span class=\"line\"><span class=\"comment\">/*\t\t</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * void rotate(List list, int distance),旋转。</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 当distance为正数时，将list后distance个元素整体移到前面。当distance为负数时，将</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * list的前distance个元素整体移到后面。</span></span><br><span class=\"line\"><span class=\"comment\">\t\t </span></span><br><span class=\"line\"><span class=\"comment\">\t\tCollections.rotate(arrayList, 4);</span></span><br><span class=\"line\"><span class=\"comment\">\t\tSystem.out.println(\"Collections.rotate(arrayList, 4):\");</span></span><br><span class=\"line\"><span class=\"comment\">\t\tSystem.out.println(arrayList);*/</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// void sort(List list),按自然排序的升序排序</span></span><br><span class=\"line\">\t\tCollections.sort(arrayList);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Collections.sort(arrayList):\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(arrayList);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// void shuffle(List list),随机排序</span></span><br><span class=\"line\">\t\tCollections.shuffle(arrayList);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Collections.shuffle(arrayList):\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(arrayList);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 定制排序的用法</span></span><br><span class=\"line\">\t\tCollections.sort(arrayList, <span class=\"keyword\">new</span> Comparator&lt;Integer&gt;() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Integer o1, Integer o2)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> o2.compareTo(o1);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"定制排序后：\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(arrayList);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"重写compareTo方法实现按年龄来排序\"><a href=\"#重写compareTo方法实现按年龄来排序\" class=\"headerlink\" title=\"重写compareTo方法实现按年龄来排序\"></a><font face=\"楷体\">重写compareTo方法实现按年龄来排序</font></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.TreeMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeMap2</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\tTreeMap&lt;Person, String&gt; pdata = <span class=\"keyword\">new</span> TreeMap&lt;Person, String&gt;();</span><br><span class=\"line\">\t\tpdata.put(<span class=\"keyword\">new</span> Person(<span class=\"string\">\"张三\"</span>, <span class=\"number\">30</span>), <span class=\"string\">\"zhangsan\"</span>);</span><br><span class=\"line\">\t\tpdata.put(<span class=\"keyword\">new</span> Person(<span class=\"string\">\"李四\"</span>, <span class=\"number\">20</span>), <span class=\"string\">\"lisi\"</span>);</span><br><span class=\"line\">\t\tpdata.put(<span class=\"keyword\">new</span> Person(<span class=\"string\">\"王五\"</span>, <span class=\"number\">10</span>), <span class=\"string\">\"wangwu\"</span>);</span><br><span class=\"line\">\t\tpdata.put(<span class=\"keyword\">new</span> Person(<span class=\"string\">\"小红\"</span>, <span class=\"number\">5</span>), <span class=\"string\">\"xiaohong\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 得到key的值的同时得到key所对应的值</span></span><br><span class=\"line\">\t\tSet&lt;Person&gt; keys = pdata.keySet();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (Person key : keys) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(key.getAge() + <span class=\"string\">\"-\"</span> + key.getName());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// person对象没有实现Comparable接口，所以必须实现，这样才不会出错，才可以使treemap中的数据按顺序排列</span></span><br><span class=\"line\"><span class=\"comment\">// 前面一个例子的String类已经默认实现了Comparable接口，详细可以查看String类的API文档，另外其他</span></span><br><span class=\"line\"><span class=\"comment\">// 像Integer类等都已经实现了Comparable接口，所以不需要另外实现了</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Person</span>&gt; </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * TODO重写compareTo方法实现按年龄来排序</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(Person o)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.age &gt; o.getAge()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.age &lt; o.getAge()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"如何对Object的list排序\"><a href=\"#如何对Object的list排序\" class=\"headerlink\" title=\"如何对Object的list排序\"></a><font face=\"楷体\">如何对Object的list排序</font></h2><ul>\n<li>对objects数组进行排序，我们可以用Arrays.sort()方法</li>\n<li>对objects的集合进行排序，需要使用Collections.sort()方法</li>\n</ul>\n<h2 id=\"如何实现数组与List的相互转换\"><a href=\"#如何实现数组与List的相互转换\" class=\"headerlink\" title=\"如何实现数组与List的相互转换\"></a><font face=\"楷体\">如何实现数组与List的相互转换</font></h2><p>List转数组：toArray(arraylist.size()方法；数组转List:Arrays的asList(a)方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; arrayList = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">\t\tarrayList.add(<span class=\"string\">\"s\"</span>);</span><br><span class=\"line\">\t\tarrayList.add(<span class=\"string\">\"e\"</span>);</span><br><span class=\"line\">\t\tarrayList.add(<span class=\"string\">\"n\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * ArrayList转数组</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> size=arrayList.size();</span><br><span class=\"line\">\t\tString[] a = arrayList.toArray(<span class=\"keyword\">new</span> String[size]);</span><br><span class=\"line\">\t\t<span class=\"comment\">//输出第二个元素</span></span><br><span class=\"line\">\t\tSystem.out.println(a[<span class=\"number\">1</span>]);<span class=\"comment\">//结果：e</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//输出整个数组</span></span><br><span class=\"line\">\t\tSystem.out.println(Arrays.toString(a));<span class=\"comment\">//结果：[s, e, n]</span></span><br><span class=\"line\">\t\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 数组转list</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">\t\tList&lt;String&gt; list=Arrays.asList(a);</span><br><span class=\"line\">\t\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * list转Arraylist</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">\t\tList&lt;String&gt; arrayList2 = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">\t\tarrayList2.addAll(list);</span><br><span class=\"line\">\t\tSystem.out.println(list);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"如何求ArrayList集合的交集-并集-差集-去重复并集\"><a href=\"#如何求ArrayList集合的交集-并集-差集-去重复并集\" class=\"headerlink\" title=\"如何求ArrayList集合的交集 并集 差集 去重复并集\"></a><font face=\"楷体\">如何求ArrayList集合的交集 并集 差集 去重复并集</font></h2><p>需要用到List接口中定义的几个方法：</p>\n<ul>\n<li>addAll(Collection&lt;? extends E&gt; c) :按指定集合的Iterator返回的顺序将指定集合中的所有元素追加到此列表的末尾<br>实例代码：</li>\n<li>retainAll(Collection&lt;?&gt; c): 仅保留此列表中包含在指定集合中的元素。 </li>\n<li>removeAll(Collection&lt;?&gt; c) :从此列表中删除指定集合中包含的所有元素。 <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> list;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *TODO 两个集合之间求交集 并集 差集 去重复并集</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 寇爽</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2017年11月21日</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@version</span> 1.8</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MethodDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\tList&lt;Integer&gt; list1 = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">\t\tlist1.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tlist1.add(<span class=\"number\">2</span>);</span><br><span class=\"line\">\t\tlist1.add(<span class=\"number\">3</span>);</span><br><span class=\"line\">\t\tlist1.add(<span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tList&lt;Integer&gt; list2 = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">\t\tlist2.add(<span class=\"number\">2</span>);</span><br><span class=\"line\">\t\tlist2.add(<span class=\"number\">3</span>);</span><br><span class=\"line\">\t\tlist2.add(<span class=\"number\">4</span>);</span><br><span class=\"line\">\t\tlist2.add(<span class=\"number\">5</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 并集</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// list1.addAll(list2);</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 交集</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//list1.retainAll(list2);</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 差集</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// list1.removeAll(list2);</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 无重复并集</span></span><br><span class=\"line\">\t\tlist2.removeAll(list1);</span><br><span class=\"line\">\t\tlist1.addAll(list2);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (Integer i : list1) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(i);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"HashMap-的工作原理及代码实现\"><a href=\"#HashMap-的工作原理及代码实现\" class=\"headerlink\" title=\"HashMap 的工作原理及代码实现\"></a><font face=\"楷体\">HashMap 的工作原理及代码实现</font></h2><p><a href=\"https://juejin.im/post/5ab0568b5188255580020e56\" target=\"_blank\" rel=\"noopener\">集合框架源码学习之HashMap(JDK1.8)</a></p>\n<h2 id=\"ConcurrentHashMap-的工作原理及代码实现\"><a href=\"#ConcurrentHashMap-的工作原理及代码实现\" class=\"headerlink\" title=\"ConcurrentHashMap 的工作原理及代码实现\"></a><font face=\"楷体\">ConcurrentHashMap 的工作原理及代码实现</font></h2><p><a href=\"http://www.cnblogs.com/chengxiao/p/6842045.html\" target=\"_blank\" rel=\"noopener\">ConcurrentHashMap实现原理及源码分析</a></p>\n<h2 id=\"集合框架底层数据结构总结\"><a href=\"#集合框架底层数据结构总结\" class=\"headerlink\" title=\"集合框架底层数据结构总结\"></a><font face=\"楷体\">集合框架底层数据结构总结</font></h2><h3 id=\"Collection\"><a href=\"#Collection\" class=\"headerlink\" title=\"- Collection\"></a>- Collection</h3><h4 id=\"1-List\"><a href=\"#1-List\" class=\"headerlink\" title=\"1. List\"></a>1. List</h4><ul>\n<li>Arraylist：数组（查询快,增删慢   线程不安全,效率高  ）</li>\n<li>Vector：数组（查询快,增删慢 线程安全,效率低  ）</li>\n<li>LinkedList：链表（查询慢,增删快  线程不安全,效率高  ）</li>\n</ul>\n<h4 id=\"2-Set\"><a href=\"#2-Set\" class=\"headerlink\" title=\"2. Set\"></a>2. Set</h4><ul>\n<li>HashSet（无序，唯一）:哈希表或者叫散列集(hash table)</li>\n<li>LinkedHashSet：链表和哈希表组成 。 由链表保证元素的排序 ， 由哈希表证元素的唯一性  </li>\n<li>TreeSet（有序，唯一）：红黑树(自平衡的排序二叉树。)</li>\n</ul>\n<h3 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"- Map\"></a>- Map</h3><ul>\n<li>HashMap：基于哈希表的Map接口实现（哈希表对键进行散列，Map结构即映射表存放键值对）</li>\n<li>LinkedHashMap:HashMap  的基础上加上了链表数据结构</li>\n<li>HashTable:哈希表</li>\n<li>TreeMap:红黑树（自平衡的排序二叉树）</li>\n</ul>\n<h2 id=\"集合的选用\"><a href=\"#集合的选用\" class=\"headerlink\" title=\"集合的选用\"></a><font face=\"楷体\">集合的选用</font></h2><p>主要根据集合的特点来选用，比如我们需要根据键值获取到元素值时就选用Map接口下的集合，需要排序时选择TreeMap,不需要排序时就选择HashMap,需要保证线程安全就选用ConcurrentHashMap.当我们只需要存放元素值时，就选择实现Collection接口的集合，需要保证元素唯一时选择实现Set接口的集合比如TreeSet或HashSet，不需要就选择实现List接口的比如ArrayList或LinkedList，然后再根据实现这些接口的集合的特点来选用。</p>\n<p>2018/3/11更新</p>\n<h2 id=\"集合的常用方法\"><a href=\"#集合的常用方法\" class=\"headerlink\" title=\"集合的常用方法\"></a><font face=\"楷体\">集合的常用方法</font></h2><p>今天下午无意看见一道某大厂的面试题，面试题的内容就是问你某一个集合常见的方法有哪些。虽然平时也经常见到这些集合，但是猛一下让我想某一个集合的常用的方法难免会有遗漏或者与其他集合搞混，所以建议大家还是照着API文档把常见的那几个集合的常用方法看一看。</p>\n<p>会持续更新。。。</p>\n<p><strong>参考书籍：</strong></p>\n<p>《Head first java 》第二版 推荐阅读真心不错 （适合基础较差的）</p>\n<p> 《Java核心技术卷1》推荐阅读真心不错 （适合基础较好的）</p>\n<p> 《算法》第四版 （适合想对数据结构的Java实现感兴趣的）</p>\n","prev":{"title":"","slug":"Java虚拟机（jvm）"},"next":{"title":"","slug":"这几道Java集合框架面试题几乎必问"},"link":"http://ziyaofeng.github.io/2018/09/21/Java集合框架常见面试题总结/","toc":[{"title":"<font face=\"楷体\">List，Set,Map三者的区别及总结</font>","id":"List，Set-Map三者的区别及总结","index":"1"},{"title":"<font face=\"楷体\">Arraylist 与 LinkedList 区别</font>","id":"Arraylist-与-LinkedList-区别","index":"2"},{"title":"<font face=\"楷体\">ArrayList 与 Vector 区别</font>","id":"ArrayList-与-Vector-区别","index":"3"},{"title":"<font face=\"楷体\">HashMap 和 Hashtable 的区别</font>","id":"HashMap-和-Hashtable-的区别","index":"4"},{"title":"<font face=\"楷体\">HashSet 和 HashMap 区别</font>","id":"HashSet-和-HashMap-区别","index":"5"},{"title":"<font face=\"楷体\">HashMap 和 ConcurrentHashMap 的区别</font>","id":"HashMap-和-ConcurrentHashMap-的区别","index":"6"},{"title":"<font face=\"楷体\">HashSet如何检查重复</font>","id":"HashSet如何检查重复","index":"7"},{"title":"<font face=\"楷体\">comparable 和 comparator的区别</font>","id":"comparable-和-comparator的区别","index":"8","children":[{"title":"<font face=\"楷体\">Comparator定制排序<font face=\"楷体\"></font></font>","id":"Comparator定制排序","index":"8.1"},{"title":"<font face=\"楷体\">重写compareTo方法实现按年龄来排序</font>","id":"重写compareTo方法实现按年龄来排序","index":"8.2"}]},{"title":"<font face=\"楷体\">如何对Object的list排序</font>","id":"如何对Object的list排序","index":"9"},{"title":"<font face=\"楷体\">如何实现数组与List的相互转换</font>","id":"如何实现数组与List的相互转换","index":"10"},{"title":"<font face=\"楷体\">如何求ArrayList集合的交集 并集 差集 去重复并集</font>","id":"如何求ArrayList集合的交集-并集-差集-去重复并集","index":"11"},{"title":"<font face=\"楷体\">HashMap 的工作原理及代码实现</font>","id":"HashMap-的工作原理及代码实现","index":"12"},{"title":"<font face=\"楷体\">ConcurrentHashMap 的工作原理及代码实现</font>","id":"ConcurrentHashMap-的工作原理及代码实现","index":"13"},{"title":"<font face=\"楷体\">集合框架底层数据结构总结</font>","id":"集合框架底层数据结构总结","index":"14","children":[{"title":"- Collection","id":"Collection","index":"14.1","children":[{"title":"1. List","id":"1-List","index":"14.1.1"},{"title":"2. Set","id":"2-Set","index":"14.1.2"}]},{"title":"- Map","id":"Map","index":"14.2"}]},{"title":"<font face=\"楷体\">集合的选用</font>","id":"集合的选用","index":"15"},{"title":"<font face=\"楷体\">集合的常用方法</font>","id":"集合的常用方法","index":"16"}]}