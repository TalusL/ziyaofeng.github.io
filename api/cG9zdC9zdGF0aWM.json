{"title":"static关键词","date":"2017-12-02T21:01:24.000Z","excerpt":"","slug":"static","tags":["java基础"],"categories":["Java相关"],"updated":"2018-09-21T00:58:00.083Z","content":"<h1 id=\"static-关键字\"><a href=\"#static-关键字\" class=\"headerlink\" title=\"static 关键字\"></a>static 关键字</h1><h2 id=\"static-关键字主要有以下四种使用场景\"><a href=\"#static-关键字主要有以下四种使用场景\" class=\"headerlink\" title=\"static 关键字主要有以下四种使用场景\"></a>static 关键字主要有以下四种使用场景</h2><ol>\n<li>修饰成员变量和成员方法</li>\n<li>静态代码块</li>\n<li>修饰类(只能修饰内部类)</li>\n<li>静态导包(用来导入类中的静态资源，1.5之后的新特性)</li>\n</ol>\n<h3 id=\"修饰成员变量和成员方法-常用\"><a href=\"#修饰成员变量和成员方法-常用\" class=\"headerlink\" title=\"修饰成员变量和成员方法(常用)\"></a>修饰成员变量和成员方法(常用)</h3><p>被 static 修饰的成员属于类，不属于单个这个类的某个对象，被类中所有对象共享，可以并且建议通过类名调用。被static 声明的成员变量属于静态成员变量，静态变量 存放在 Java 内存区域的方法区。</p>\n<p>方法区与 Java 堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。虽然Java虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做 Non-Heap（非堆），目的应该是与 Java 堆区分开来。</p>\n<p> HotSpot 虚拟机中方法区也常被称为 “永久代”，本质上两者并不等价。仅仅是因为 HotSpot 虚拟机设计团队用永久代来实现方法区而已，这样 HotSpot 虚拟机的垃圾收集器就可以像管理 Java 堆一样管理这部分内存了。但是这并不是一个好主意，因为这样更容易遇到内存溢出问题。</p>\n<p>调用格式：</p>\n<ul>\n<li>类名.静态变量名</li>\n<li>类名.静态方法名()</li>\n</ul>\n<p>如果变量或者方法被 private 则代表该属性或者该方法只能在类的内部被访问而不能在类的外部被方法。</p>\n<p>测试方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StaticBean</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    String name;</span><br><span class=\"line\">    静态变量</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StaticBean</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    静态方法</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">SayHello</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(Hello i am java);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> StaticBean&#123; +</span><br><span class=\"line\">                name=<span class=\"string\">' + name + '</span><span class=\"string\">''</span> + age + age +</span><br><span class=\"line\">                <span class=\"string\">'&#125;'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StaticDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        StaticBean staticBean = <span class=\"keyword\">new</span> StaticBean(<span class=\"number\">1</span>);</span><br><span class=\"line\">        StaticBean staticBean2 = <span class=\"keyword\">new</span> StaticBean(<span class=\"number\">2</span>);</span><br><span class=\"line\">        StaticBean staticBean3 = <span class=\"keyword\">new</span> StaticBean(<span class=\"number\">3</span>);</span><br><span class=\"line\">        StaticBean staticBean4 = <span class=\"keyword\">new</span> StaticBean(<span class=\"number\">4</span>);</span><br><span class=\"line\">        StaticBean.age = <span class=\"number\">33</span>;</span><br><span class=\"line\">        StaticBean&#123;name=<span class=\"string\">'1'</span>age33&#125; StaticBean&#123;name=<span class=\"string\">'2'</span>age33&#125; StaticBean&#123;name=<span class=\"string\">'3'</span>age33&#125; StaticBean&#123;name=<span class=\"string\">'4'</span>age33&#125;</span><br><span class=\"line\">        System.out.println(staticBean+ +staticBean2+ +staticBean3+ +staticBean4);</span><br><span class=\"line\">        StaticBean.SayHello();Hello i am java</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"静态代码块\"><a href=\"#静态代码块\" class=\"headerlink\" title=\"静态代码块\"></a>静态代码块</h3><p>静态代码块定义在类中方法外, 静态代码块在非静态代码块之前执行(静态代码块—非静态代码块—构造方法)。 该类不管创建多少对象，静态代码块只执行一次.</p>\n<p>静态代码块的格式是 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static &#123;    </span><br><span class=\"line\">语句体;   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>一个类中的静态代码块可以有多个，位置可以随便放，它不在任何的方法体内，JVM加载类时会执行这些静态的代码块，如果静态代码块有多个，JVM将按照它们在类中出现的先后顺序依次执行它们，每个代码块只会被执行一次。</p>\n<p><img src=\"http://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-9-14/88531075.jpg\" alt=\"\"></p>\n<p>静态代码块对于定义在它之后的静态变量，可以赋值，但是不能访问.</p>\n<h3 id=\"静态内部类\"><a href=\"#静态内部类\" class=\"headerlink\" title=\"静态内部类\"></a>静态内部类</h3><p>静态内部类与非静态内部类之间存在一个最大的区别，我们知道非静态内部类在编译完成之后会隐含地保存着一个引用，该引用是指向创建它的外围内，但是静态内部类却没有。没有这个引用就意味着：</p>\n<ol>\n<li>它的创建是不需要依赖外围类的创建。</li>\n<li>它不能使用任何外围类的非static成员变量和方法。</li>\n</ol>\n<p>Example（静态内部类实现单例模式）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    声明为 <span class=\"keyword\">private</span> 避免调用默认构造方法创建对象</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    声明为 <span class=\"keyword\">private</span> 表明静态内部该类只能在该 Singleton 类中被访问</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonHolder</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton INSTANCE = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getUniqueInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> SingletonHolder.INSTANCE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当 Singleton 类加载时，静态内部类 SingletonHolder 没有被加载进内存。只有当调用 <code>getUniqueInstance()</code>方法从而触发 <code>SingletonHolder.INSTANCE</code> 时 SingletonHolder 才会被加载，此时初始化 INSTANCE 实例，并且 JVM 能确保 INSTANCE 只被实例化一次。</p>\n<p>这种方式不仅具有延迟初始化的好处，而且由 JVM 提供了对线程安全的支持。</p>\n<h3 id=\"静态导包\"><a href=\"#静态导包\" class=\"headerlink\" title=\"静态导包\"></a>静态导包</h3><p>格式为：import static </p>\n<p>这两个关键字连用可以指定导入某个类中的指定静态资源，并且不需要使用类名调用类中静态成员，可以直接使用类中静态成员变量和成员方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  Math. --- 将Math中的所有静态资源导入，这时候可以直接使用里面的静态方法，而不用通过类名进行调用</span><br><span class=\"line\">  如果只想导入单一某个静态方法，只需要将换成对应的方法名即可</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> java.lang.Math.;</span><br><span class=\"line\"></span><br><span class=\"line\">  换成<span class=\"keyword\">import</span> <span class=\"keyword\">static</span> java.lang.Math.max;具有一样的效果</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> max = max(<span class=\"number\">1</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\">\t\tSystem.out.println(max);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"补充内容\"><a href=\"#补充内容\" class=\"headerlink\" title=\"补充内容\"></a>补充内容</h2><h3 id=\"静态方法与非静态方法\"><a href=\"#静态方法与非静态方法\" class=\"headerlink\" title=\"静态方法与非静态方法\"></a>静态方法与非静态方法</h3><p>静态方法属于类本身，非静态方法属于从该类生成的每个对象。 如果您的方法执行的操作不依赖于其类的各个变量和方法，请将其设置为静态（这将使程序的占用空间更小）。 否则，它应该是非静态的。</p>\n<p>Example</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Foo</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123; </span><br><span class=\"line\">       <span class=\"keyword\">this</span>.i = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">method1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> An example string that doesn<span class=\"string\">'t depend on i (an instance variable);</span></span><br><span class=\"line\"><span class=\"string\">       </span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    public int method2() &#123;</span></span><br><span class=\"line\"><span class=\"string\">       return this.i + 1;  Depends on i</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>你可以像这样调用静态方法：<code>Foo.method1（）</code>。 如果您尝试使用这种方法调用 method2 将失败。 但这样可行：<code>Foo bar = new Foo（1）;bar.method2（）;</code></p>\n<p>总结：</p>\n<ul>\n<li>在外部调用静态方法时，可以使用”类名.方法名”的方式，也可以使用”对象名.方法名”的方式。而实例方法只有后面这种方式。也就是说，调用静态方法可以无需创建对象。 </li>\n<li>静态方法在访问本类的成员时，只允许访问静态成员（即静态成员变量和静态方法），而不允许访问实例成员变量和实例方法；实例方法则无此限制 </li>\n</ul>\n<h3 id=\"static-静态代码块与-非静态代码块（构造代码块）\"><a href=\"#static-静态代码块与-非静态代码块（构造代码块）\" class=\"headerlink\" title=\"static{}静态代码块与{}非静态代码块（构造代码块）\"></a>static{}静态代码块与{}非静态代码块（构造代码块）</h3><p>相同点： 都是在JVM加载类时且在构造方法执行之前执行，在类中都可以定义多个，定义多个时按定义的顺序执行，一般在代码块中对一些static变量进行赋值。 </p>\n<p>不同点： 静态代码块在非静态代码块之前执行(静态代码块—非静态代码块—构造方法)。静态代码块只在第一次new执行一次，之后不再执行，而非静态代码块在每new一次就执行一次。 非静态代码块可在普通方法中定义(不过作用不大)；而静态代码块不行。 </p>\n<p>一般情况下,如果有些代码比如一些项目最常用的变量或对象必须在项目启动的时候就执行的时候,需要使用静态代码块,这种代码是主动执行的。如果我们想要设计不需要创建对象就可以调用类中的方法，例如：Arrays类，Character类，String类等，就需要使用静态方法, 两者的区别是 静态代码块是自动执行的而静态方法是被调用的时候才执行的. </p>\n<p>Example</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.print(默认构造方法！--);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     非静态代码块</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        System.out.print(非静态代码块！--);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     静态代码块</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.print(静态代码块！--);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.print(静态方法中的内容! --);</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            System.out.print(静态方法中的代码块！--);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Test test = <span class=\"keyword\">new</span> Test();   </span><br><span class=\"line\">        Test.test();静态代码块！--静态方法中的内容! --静态方法中的代码块！--</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>当执行 <code>Test.test();</code> 时输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">静态代码块！--静态方法中的内容! --静态方法中的代码块！--</span><br></pre></td></tr></table></figure>\n<p>当执行 <code>Test test = new Test();</code> 时输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">静态代码块！--非静态代码块！--默认构造方法！--</span><br></pre></td></tr></table></figure>\n<p>非静态代码块与构造函数的区别是： 非静态代码块是给所有对象进行统一初始化，而构造函数是给对应的对象初始化，因为构造函数是可以多个的，运行哪个构造函数就会建立什么样的对象，但无论建立哪个对象，都会先执行相同的构造代码块。也就是说，构造代码块中定义的是不同对象共性的初始化内容。    </p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li>httpsblog.csdn.netchen13579867831articledetails78995480</li>\n<li>http<a href=\"http://www.cnblogs.comchenssyp3388487.html\" target=\"_blank\" rel=\"noopener\">www.cnblogs.comchenssyp3388487.html</a></li>\n<li>http<a href=\"http://www.cnblogs.comQian123p5713440.html\" target=\"_blank\" rel=\"noopener\">www.cnblogs.comQian123p5713440.html</a></li>\n</ul>\n","prev":{"title":"Java常用关键词","slug":"final、static、this、super"},"next":{"title":"synchronized","slug":"synchronized"},"link":"http://ziyaofeng.github.io/2017/12/03/static/","toc":[{"title":"static 关键字","id":"static-关键字","index":"1","children":[{"title":"static 关键字主要有以下四种使用场景","id":"static-关键字主要有以下四种使用场景","index":"1.1","children":[{"title":"修饰成员变量和成员方法(常用)","id":"修饰成员变量和成员方法-常用","index":"1.1.1"},{"title":"静态代码块","id":"静态代码块","index":"1.1.2"},{"title":"静态内部类","id":"静态内部类","index":"1.1.3"},{"title":"静态导包","id":"静态导包","index":"1.1.4"}]},{"title":"补充内容","id":"补充内容","index":"1.2","children":[{"title":"静态方法与非静态方法","id":"静态方法与非静态方法","index":"1.2.1"},{"title":"static{}静态代码块与{}非静态代码块（构造代码块）","id":"static-静态代码块与-非静态代码块（构造代码块）","index":"1.2.2"},{"title":"参考","id":"参考","index":"1.2.3"}]}]}]}